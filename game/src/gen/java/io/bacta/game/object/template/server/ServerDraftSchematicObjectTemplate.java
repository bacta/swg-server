package io.bacta.game.object.template.server;

import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.localization.StringId;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.utility.*;
import io.bacta.template.definition.TemplateDefinition;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@Slf4j
@TemplateDefinition
public class ServerDraftSchematicObjectTemplate extends ServerIntangibleObjectTemplate {
	public static final int TAG_SERVERDRAFTSCHEMATICOBJECTTEMPLATE = Tag.convertStringToTag("DSCO");

	private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
		objectTemplateList.registerTemplate(ServerDraftSchematicObjectTemplate.TAG_SERVERDRAFTSCHEMATICOBJECTTEMPLATE, ServerDraftSchematicObjectTemplate::new);
		objectTemplateList.registerTemplate(IngredientSlotObjectTemplate.TAG_INGREDIENTSLOT, IngredientSlotObjectTemplate::new);
	}

	private int templateVersion;

	private final IntegerParam category = new IntegerParam(); //schematic category (food, weapon, etc)
	private final StringParam craftedObjectTemplate = new StringParam(); //what object we create
	private final StringParam crateObjectTemplate = new StringParam(); //the "crate" to use when manufacturing multiple copies of the object
	private final List<StructParam<ObjectTemplate>> slots = new ArrayList<>(); //ingredient slots
	private boolean slotsLoaded;
	private boolean slotsAppend;
	private final List<StringParam> skillCommands = new ArrayList<>(); //skill commands needed to access this schematic and required slots
	private boolean skillCommandsLoaded;
	private boolean skillCommandsAppend;
	private final BoolParam destroyIngredients = new BoolParam(); //flag that the ingredients used in the design stage should be destroyed
	private final List<StringParam> manufactureScripts = new ArrayList<>(); //scripts that will be attached to a manufacturing schematic created from this schematic
	private boolean manufactureScriptsLoaded;
	private boolean manufactureScriptsAppend;
	private final IntegerParam itemsPerContainer = new IntegerParam(); //when manufacturing, how many items will be put in a container (1 = items not in a container)
	private final FloatParam manufactureTime = new FloatParam(); //time to manufacture an item (in secs) per complexity point
	private final FloatParam prototypeTime = new FloatParam(); //time to create a prototype (in secs) per complexity point

	public ServerDraftSchematicObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
		super(filename, objectTemplateList);
	}

	@Override
	public int getId() { return TAG_SERVERDRAFTSCHEMATICOBJECTTEMPLATE; }

	public CraftingType getCategory() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!category.isLoaded()) {
			if (base == null) {
				return CraftingType.from(0);
			} else {
				return base.getCategory();
			}
		}

		return CraftingType.from(category.getValue());
	}

	public ServerObjectTemplate getCraftedObjectTemplate() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!craftedObjectTemplate.isLoaded()) {
			if (base == null) {
				return null;
			} else {
				return base.getCraftedObjectTemplate();
			}
		}

		ServerObjectTemplate returnValue = null;
		final String templateName = craftedObjectTemplate.getValue();

		if (!templateName.isEmpty()) {
			returnValue = objectTemplateList.fetch(templateName);

			 if (returnValue == null)
				throw new IllegalStateException(String.format("error loading template %s", templateName));
		}

		return returnValue;
	}

	public ServerFactoryObjectTemplate getCrateObjectTemplate() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!crateObjectTemplate.isLoaded()) {
			if (base == null) {
				return null;
			} else {
				return base.getCrateObjectTemplate();
			}
		}

		ServerFactoryObjectTemplate returnValue = null;
		final String templateName = crateObjectTemplate.getValue();

		if (!templateName.isEmpty()) {
			returnValue = objectTemplateList.fetch(templateName);

			 if (returnValue == null)
				throw new IllegalStateException(String.format("error loading template %s", templateName));
		}

		return returnValue;
	}

	public IngredientSlot getSlots(int index) {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!slotsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getSlots(index);
			}
		}

		if (slotsAppend && base != null) {
			int baseCount = base.getSlotsCount();

			if (index < baseCount) {
				return base.getSlots(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = slots.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final IngredientSlotObjectTemplate param = (IngredientSlotObjectTemplate)structTemplate;

		final IngredientSlot data = new IngredientSlot();
			data.optional = param.getOptional();
			data.name = param.getName();
			for (int i = 0; i < param.getOptionsCount(); ++i)
				data.options.add(param.getOptions(i));
			data.optionalSkillCommand = param.getOptionalSkillCommand();
			data.complexity = param.getComplexity();
			data.appearance = param.getAppearance();

		return data;
	}

	public IngredientSlot getSlotsMin(int index) {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!slotsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getSlotsMin(index);
			}
		}

		if (slotsAppend && base != null) {
			int baseCount = base.getSlotsCount();

			if (index < baseCount) {
				return base.getSlotsMin(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = slots.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final IngredientSlotObjectTemplate param = (IngredientSlotObjectTemplate)structTemplate;

		final IngredientSlot data = new IngredientSlot();
			data.optional = param.getOptional();
			data.name = param.getName();
			for (int i = 0; i < param.getOptionsCount(); ++i)
				data.options.add(param.getOptionsMin(i));
			data.optionalSkillCommand = param.getOptionalSkillCommand();
			data.complexity = param.getComplexityMin();
			data.appearance = param.getAppearance();

		return data;
	}

	public IngredientSlot getSlotsMax(int index) {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!slotsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getSlotsMax(index);
			}
		}

		if (slotsAppend && base != null) {
			int baseCount = base.getSlotsCount();

			if (index < baseCount) {
				return base.getSlotsMax(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = slots.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final IngredientSlotObjectTemplate param = (IngredientSlotObjectTemplate)structTemplate;

		final IngredientSlot data = new IngredientSlot();
			data.optional = param.getOptional();
			data.name = param.getName();
			for (int i = 0; i < param.getOptionsCount(); ++i)
				data.options.add(param.getOptionsMax(i));
			data.optionalSkillCommand = param.getOptionalSkillCommand();
			data.complexity = param.getComplexityMax();
			data.appearance = param.getAppearance();

		return data;
	}

	public int getSlotsCount() {
		if (!slotsLoaded) {
			if (baseData == null)
				return 0;

		final ServerDraftSchematicObjectTemplate base = (ServerDraftSchematicObjectTemplate)baseData;
			return base.getSlotsCount();
		}

		int count = slots.size();

		if (slotsAppend && baseData != null) {
			final ServerDraftSchematicObjectTemplate base = (ServerDraftSchematicObjectTemplate)baseData;
			count += base.getSlotsCount();
		}

		return count;
	}

	public String getSkillCommands(int index) {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!skillCommandsLoaded) {
			if (base == null) {
				return "";
			} else {
				return base.getSkillCommands(index);
			}
		}

		if (skillCommandsAppend && base != null) {
			int baseCount = base.getSkillCommandsCount();

			if (index < baseCount) {
				return base.getSkillCommands(index);
			}
			index -= baseCount;
		}
		String value = this.skillCommands.get(index).getValue();
		return value;
	}

	public int getSkillCommandsCount() {
		if (!skillCommandsLoaded) {
			if (baseData == null)
				return 0;

		final ServerDraftSchematicObjectTemplate base = (ServerDraftSchematicObjectTemplate)baseData;
			return base.getSkillCommandsCount();
		}

		int count = skillCommands.size();

		if (skillCommandsAppend && baseData != null) {
			final ServerDraftSchematicObjectTemplate base = (ServerDraftSchematicObjectTemplate)baseData;
			count += base.getSkillCommandsCount();
		}

		return count;
	}

	public boolean getDestroyIngredients() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!destroyIngredients.isLoaded()) {
			if (base == null) {
				return false;
			} else {
				return base.getDestroyIngredients();
			}
		}

		boolean value = this.destroyIngredients.getValue();
		return value;
	}

	public String getManufactureScripts(int index) {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!manufactureScriptsLoaded) {
			if (base == null) {
				return "";
			} else {
				return base.getManufactureScripts(index);
			}
		}

		if (manufactureScriptsAppend && base != null) {
			int baseCount = base.getManufactureScriptsCount();

			if (index < baseCount) {
				return base.getManufactureScripts(index);
			}
			index -= baseCount;
		}
		String value = this.manufactureScripts.get(index).getValue();
		return value;
	}

	public int getManufactureScriptsCount() {
		if (!manufactureScriptsLoaded) {
			if (baseData == null)
				return 0;

		final ServerDraftSchematicObjectTemplate base = (ServerDraftSchematicObjectTemplate)baseData;
			return base.getManufactureScriptsCount();
		}

		int count = manufactureScripts.size();

		if (manufactureScriptsAppend && baseData != null) {
			final ServerDraftSchematicObjectTemplate base = (ServerDraftSchematicObjectTemplate)baseData;
			count += base.getManufactureScriptsCount();
		}

		return count;
	}

	public int getItemsPerContainer() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!itemsPerContainer.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getItemsPerContainer();
			}
		}

		int value = this.itemsPerContainer.getValue();
		final byte delta = this.itemsPerContainer.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getItemsPerContainer();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getItemsPerContainerMin() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!itemsPerContainer.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getItemsPerContainerMin();
			}
		}

		int value = this.itemsPerContainer.getMinValue();
		final byte delta = this.itemsPerContainer.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getItemsPerContainerMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getItemsPerContainerMax() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!itemsPerContainer.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getItemsPerContainerMax();
			}
		}

		int value = this.itemsPerContainer.getMaxValue();
		final byte delta = this.itemsPerContainer.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getItemsPerContainerMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getManufactureTime() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!manufactureTime.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getManufactureTime();
			}
		}

		float value = this.manufactureTime.getValue();
		final byte delta = this.manufactureTime.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getManufactureTime();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getManufactureTimeMin() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!manufactureTime.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getManufactureTimeMin();
			}
		}

		float value = this.manufactureTime.getMinValue();
		final byte delta = this.manufactureTime.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getManufactureTimeMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getManufactureTimeMax() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!manufactureTime.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getManufactureTimeMax();
			}
		}

		float value = this.manufactureTime.getMaxValue();
		final byte delta = this.manufactureTime.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getManufactureTimeMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getPrototypeTime() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!prototypeTime.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getPrototypeTime();
			}
		}

		float value = this.prototypeTime.getValue();
		final byte delta = this.prototypeTime.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getPrototypeTime();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getPrototypeTimeMin() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!prototypeTime.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getPrototypeTimeMin();
			}
		}

		float value = this.prototypeTime.getMinValue();
		final byte delta = this.prototypeTime.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getPrototypeTimeMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getPrototypeTimeMax() {
		ServerDraftSchematicObjectTemplate base = null;

		if (baseData instanceof ServerDraftSchematicObjectTemplate)
			base = (ServerDraftSchematicObjectTemplate)baseData;

		if (!prototypeTime.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getPrototypeTimeMax();
			}
		}

		float value = this.prototypeTime.getMaxValue();
		final byte delta = this.prototypeTime.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getPrototypeTimeMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	@Override
	protected void load(final Iff iff) {
		if (iff.getCurrentName() != TAG_SERVERDRAFTSCHEMATICOBJECTTEMPLATE) {
			super.load(iff);
			return;
		}

		iff.enterForm();
		templateVersion = iff.getCurrentName();

		if (templateVersion == Tag.TAG_DERV) {
			iff.enterForm();
			iff.enterChunk();
			final String baseFilename = iff.readString();
			iff.exitChunk();
			final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
			Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
			if (baseData == base && base != null) {
				base.releaseReference();
			} else {
				if (baseData != null)
					baseData.releaseReference();
				baseData = base;
			}
			iff.exitForm();
			templateVersion = iff.getCurrentName();
		}

		iff.enterForm();
		iff.enterChunk();
		final int paramCount = iff.readInt();
		iff.exitChunk();
		for (int i = 0; i < paramCount; ++i) {
			iff.enterChunk();
			final String parameterName = iff.readString();

			if ("category".equalsIgnoreCase(parameterName)) {
				category.loadFromIff(objectTemplateList, iff);
			} else if ("craftedObjectTemplate".equalsIgnoreCase(parameterName)) {
				craftedObjectTemplate.loadFromIff(objectTemplateList, iff);
			} else if ("crateObjectTemplate".equalsIgnoreCase(parameterName)) {
				crateObjectTemplate.loadFromIff(objectTemplateList, iff);
			} else if ("slots".equalsIgnoreCase(parameterName)) {
				slots.clear();
				slotsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final StructParam<ObjectTemplate> newData = new StructParam<ObjectTemplate>();
					newData.loadFromIff(objectTemplateList, iff);
					slots.add(newData);
				}
				slotsLoaded = true;
			} else if ("skillCommands".equalsIgnoreCase(parameterName)) {
				skillCommands.clear();
				skillCommandsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final StringParam newData = new StringParam();
					newData.loadFromIff(objectTemplateList, iff);
					skillCommands.add(newData);
				}
				skillCommandsLoaded = true;
			} else if ("destroyIngredients".equalsIgnoreCase(parameterName)) {
				destroyIngredients.loadFromIff(objectTemplateList, iff);
			} else if ("manufactureScripts".equalsIgnoreCase(parameterName)) {
				manufactureScripts.clear();
				manufactureScriptsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final StringParam newData = new StringParam();
					newData.loadFromIff(objectTemplateList, iff);
					manufactureScripts.add(newData);
				}
				manufactureScriptsLoaded = true;
			} else if ("itemsPerContainer".equalsIgnoreCase(parameterName)) {
				itemsPerContainer.loadFromIff(objectTemplateList, iff);
			} else if ("manufactureTime".equalsIgnoreCase(parameterName)) {
				manufactureTime.loadFromIff(objectTemplateList, iff);
			} else if ("prototypeTime".equalsIgnoreCase(parameterName)) {
				prototypeTime.loadFromIff(objectTemplateList, iff);
			} else  {
				LOGGER.trace("Unexpected parameter {}", parameterName);
			}

			iff.exitChunk();
		}
		iff.exitForm();

		super.load(iff);
		iff.exitForm();
	}

	public static class IngredientSlot {
		@Getter protected boolean optional;
		@Getter protected StringId name;
		protected List<Ingredient> options = new ArrayList<>(1);
		@Getter protected String optionalSkillCommand;
		@Getter protected float complexity;
		@Getter protected String appearance;
	}

	protected static class IngredientSlotObjectTemplate extends ObjectTemplate {
		public static final int TAG_INGREDIENTSLOT = Tag.convertStringToTag("DINS");

		public IngredientSlotObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
			super(filename, objectTemplateList);
		}

		private final BoolParam optional = new BoolParam(); //is the slot optional
		private final StringIdParam name = new StringIdParam(); //slot name
		private final List<StructParam<ObjectTemplate>> options = new ArrayList<>(); //possible ingredients that can be used to fill the slot
		private boolean optionsLoaded;
		private boolean optionsAppend;
		private final StringParam optionalSkillCommand = new StringParam(); //skill commands needed to access this slot if it is optional (ignored for required slots)
		private final FloatParam complexity = new FloatParam(); //adjustment to complexity by using this slot
		private final StringParam appearance = new StringParam(); //if the slot is a component, the name of the hardpoint associated with the slot; if the slot is a resource, a string used to build an appearance file name

		@Override
		public int getId() { return TAG_INGREDIENTSLOT; }

		public boolean getOptional() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!optional.isLoaded()) {
				if (base == null) {
					return false;
				} else {
					return base.getOptional();
				}
			}

			boolean value = this.optional.getValue();
			return value;
		}

		public StringId getName() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!name.isLoaded()) {
				if (base == null) {
					return StringId.INVALID;
				} else {
					return base.getName();
				}
			}

			StringId value = this.name.getValue();
			return value;
		}

		public Ingredient getOptions(int index) {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!optionsLoaded) {
				if (base == null) {
					return null;
				} else {
					return base.getOptions(index);
				}
			}

			if (optionsAppend && base != null) {
				int baseCount = base.getOptionsCount();

				if (index < baseCount) {
					return base.getOptions(index);
				}
				index -= baseCount;
			}
			final ObjectTemplate structTemplate = options.get(index).getValue();
			Preconditions.checkNotNull(structTemplate);
			final IngredientObjectTemplate param = (IngredientObjectTemplate)structTemplate;

			final Ingredient data = new Ingredient();
			data.ingredientType = param.getIngredientType();
			for (int i = 0; i < param.getIngredientsCount(); ++i)
				data.ingredients.add(param.getIngredients(i));
			data.complexity = param.getComplexity();
			data.skillCommand = param.getSkillCommand();

			return data;
		}

		public Ingredient getOptionsMin(int index) {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!optionsLoaded) {
				if (base == null) {
					return null;
				} else {
					return base.getOptionsMin(index);
				}
			}

			if (optionsAppend && base != null) {
				int baseCount = base.getOptionsCount();

				if (index < baseCount) {
					return base.getOptionsMin(index);
				}
				index -= baseCount;
			}
			final ObjectTemplate structTemplate = options.get(index).getValue();
			Preconditions.checkNotNull(structTemplate);
			final IngredientObjectTemplate param = (IngredientObjectTemplate)structTemplate;

			final Ingredient data = new Ingredient();
			data.ingredientType = param.getIngredientType();
			for (int i = 0; i < param.getIngredientsCount(); ++i)
				data.ingredients.add(param.getIngredientsMin(i));
			data.complexity = param.getComplexityMin();
			data.skillCommand = param.getSkillCommand();

			return data;
		}

		public Ingredient getOptionsMax(int index) {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!optionsLoaded) {
				if (base == null) {
					return null;
				} else {
					return base.getOptionsMax(index);
				}
			}

			if (optionsAppend && base != null) {
				int baseCount = base.getOptionsCount();

				if (index < baseCount) {
					return base.getOptionsMax(index);
				}
				index -= baseCount;
			}
			final ObjectTemplate structTemplate = options.get(index).getValue();
			Preconditions.checkNotNull(structTemplate);
			final IngredientObjectTemplate param = (IngredientObjectTemplate)structTemplate;

			final Ingredient data = new Ingredient();
			data.ingredientType = param.getIngredientType();
			for (int i = 0; i < param.getIngredientsCount(); ++i)
				data.ingredients.add(param.getIngredientsMax(i));
			data.complexity = param.getComplexityMax();
			data.skillCommand = param.getSkillCommand();

			return data;
		}

		public int getOptionsCount() {
			if (!optionsLoaded) {
				if (baseData == null)
					return 0;

			final IngredientSlotObjectTemplate base = (IngredientSlotObjectTemplate)baseData;
				return base.getOptionsCount();
			}

			int count = options.size();

			if (optionsAppend && baseData != null) {
				final IngredientSlotObjectTemplate base = (IngredientSlotObjectTemplate)baseData;
				count += base.getOptionsCount();
			}

			return count;
		}

		public String getOptionalSkillCommand() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!optionalSkillCommand.isLoaded()) {
				if (base == null) {
					return "";
				} else {
					return base.getOptionalSkillCommand();
				}
			}

			String value = this.optionalSkillCommand.getValue();
			return value;
		}

		public float getComplexity() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!complexity.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getComplexity();
				}
			}

			float value = this.complexity.getValue();
			final byte delta = this.complexity.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getComplexity();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getComplexityMin() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!complexity.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getComplexityMin();
				}
			}

			float value = this.complexity.getMinValue();
			final byte delta = this.complexity.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getComplexityMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getComplexityMax() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!complexity.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getComplexityMax();
				}
			}

			float value = this.complexity.getMaxValue();
			final byte delta = this.complexity.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getComplexityMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public String getAppearance() {
			IngredientSlotObjectTemplate base = null;

			if (baseData instanceof IngredientSlotObjectTemplate)
				base = (IngredientSlotObjectTemplate)baseData;

			if (!appearance.isLoaded()) {
				if (base == null) {
					return "";
				} else {
					return base.getAppearance();
				}
			}

			String value = this.appearance.getValue();
			return value;
		}

		@Override
		protected void load(final Iff iff) {
			iff.enterForm();
			iff.enterChunk();
			final int paramCount = iff.readInt();
			iff.exitChunk();
			for (int i = 0; i < paramCount; ++i) {
				iff.enterChunk();
				final String parameterName = iff.readString();

				if ("optional".equalsIgnoreCase(parameterName)) {
					optional.loadFromIff(objectTemplateList, iff);
				} else if ("name".equalsIgnoreCase(parameterName)) {
					name.loadFromIff(objectTemplateList, iff);
				} else if ("options".equalsIgnoreCase(parameterName)) {
					options.clear();
					optionsAppend = iff.readBoolean();
					int listCount = iff.readInt();
					for (int j = 0; j < listCount; ++j) {
						final StructParam<ObjectTemplate> newData = new StructParam<ObjectTemplate>();
						newData.loadFromIff(objectTemplateList, iff);
						options.add(newData);
					}
					optionsLoaded = true;
				} else if ("optionalSkillCommand".equalsIgnoreCase(parameterName)) {
					optionalSkillCommand.loadFromIff(objectTemplateList, iff);
				} else if ("complexity".equalsIgnoreCase(parameterName)) {
					complexity.loadFromIff(objectTemplateList, iff);
				} else if ("appearance".equalsIgnoreCase(parameterName)) {
					appearance.loadFromIff(objectTemplateList, iff);
				} else  {
					LOGGER.trace("Unexpected parameter {}", parameterName);
				}

				iff.exitChunk();
			}
			iff.exitForm();
		}

	}

}

