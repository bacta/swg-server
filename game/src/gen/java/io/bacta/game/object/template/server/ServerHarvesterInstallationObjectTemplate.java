package io.bacta.game.object.template.server;

import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.utility.IntegerParam;
import io.bacta.shared.utility.StringParam;
import io.bacta.template.definition.TemplateDefinition;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@Slf4j
@TemplateDefinition
public class ServerHarvesterInstallationObjectTemplate extends ServerInstallationObjectTemplate {
	public static final int TAG_SERVERHARVESTERINSTALLATIONOBJECTTEMPLATE = Tag.convertStringToTag("HINO");

	private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
		objectTemplateList.registerTemplate(ServerHarvesterInstallationObjectTemplate.TAG_SERVERHARVESTERINSTALLATIONOBJECTTEMPLATE, ServerHarvesterInstallationObjectTemplate::new);
	}

	private int templateVersion;

	private final IntegerParam maxExtractionRate = new IntegerParam(); //max extraction rate
	private final IntegerParam currentExtractionRate = new IntegerParam(); //rate at which the machine could currently operate
	private final IntegerParam maxHopperSize = new IntegerParam(); //max extracted resource storage capacity of the installation
	private final StringParam masterClassName = new StringParam(); //highest level resource class that the harverster can extract

	public ServerHarvesterInstallationObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
		super(filename, objectTemplateList);
	}

	@Override
	public int getId() { return TAG_SERVERHARVESTERINSTALLATIONOBJECTTEMPLATE; }

	public int getMaxExtractionRate() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!maxExtractionRate.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getMaxExtractionRate();
			}
		}

		int value = this.maxExtractionRate.getValue();
		final byte delta = this.maxExtractionRate.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getMaxExtractionRate();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getMaxExtractionRateMin() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!maxExtractionRate.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getMaxExtractionRateMin();
			}
		}

		int value = this.maxExtractionRate.getMinValue();
		final byte delta = this.maxExtractionRate.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getMaxExtractionRateMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getMaxExtractionRateMax() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!maxExtractionRate.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getMaxExtractionRateMax();
			}
		}

		int value = this.maxExtractionRate.getMaxValue();
		final byte delta = this.maxExtractionRate.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getMaxExtractionRateMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getCurrentExtractionRate() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!currentExtractionRate.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getCurrentExtractionRate();
			}
		}

		int value = this.currentExtractionRate.getValue();
		final byte delta = this.currentExtractionRate.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getCurrentExtractionRate();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getCurrentExtractionRateMin() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!currentExtractionRate.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getCurrentExtractionRateMin();
			}
		}

		int value = this.currentExtractionRate.getMinValue();
		final byte delta = this.currentExtractionRate.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getCurrentExtractionRateMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getCurrentExtractionRateMax() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!currentExtractionRate.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getCurrentExtractionRateMax();
			}
		}

		int value = this.currentExtractionRate.getMaxValue();
		final byte delta = this.currentExtractionRate.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getCurrentExtractionRateMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getMaxHopperSize() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!maxHopperSize.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getMaxHopperSize();
			}
		}

		int value = this.maxHopperSize.getValue();
		final byte delta = this.maxHopperSize.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getMaxHopperSize();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getMaxHopperSizeMin() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!maxHopperSize.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getMaxHopperSizeMin();
			}
		}

		int value = this.maxHopperSize.getMinValue();
		final byte delta = this.maxHopperSize.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getMaxHopperSizeMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getMaxHopperSizeMax() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!maxHopperSize.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getMaxHopperSizeMax();
			}
		}

		int value = this.maxHopperSize.getMaxValue();
		final byte delta = this.maxHopperSize.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getMaxHopperSizeMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public String getMasterClassName() {
		ServerHarvesterInstallationObjectTemplate base = null;

		if (baseData instanceof ServerHarvesterInstallationObjectTemplate)
			base = (ServerHarvesterInstallationObjectTemplate)baseData;

		if (!masterClassName.isLoaded()) {
			if (base == null) {
				return "";
			} else {
				return base.getMasterClassName();
			}
		}

		String value = this.masterClassName.getValue();
		return value;
	}

	@Override
	protected void load(final Iff iff) {
		if (iff.getCurrentName() != TAG_SERVERHARVESTERINSTALLATIONOBJECTTEMPLATE) {
			super.load(iff);
			return;
		}

		iff.enterForm();
		templateVersion = iff.getCurrentName();

		if (templateVersion == Tag.TAG_DERV) {
			iff.enterForm();
			iff.enterChunk();
			final String baseFilename = iff.readString();
			iff.exitChunk();
			final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
			Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
			if (baseData == base && base != null) {
				base.releaseReference();
			} else {
				if (baseData != null)
					baseData.releaseReference();
				baseData = base;
			}
			iff.exitForm();
			templateVersion = iff.getCurrentName();
		}

		iff.enterForm();
		iff.enterChunk();
		final int paramCount = iff.readInt();
		iff.exitChunk();
		for (int i = 0; i < paramCount; ++i) {
			iff.enterChunk();
			final String parameterName = iff.readString();

			if ("maxExtractionRate".equalsIgnoreCase(parameterName)) {
				maxExtractionRate.loadFromIff(objectTemplateList, iff);
			} else if ("currentExtractionRate".equalsIgnoreCase(parameterName)) {
				currentExtractionRate.loadFromIff(objectTemplateList, iff);
			} else if ("maxHopperSize".equalsIgnoreCase(parameterName)) {
				maxHopperSize.loadFromIff(objectTemplateList, iff);
			} else if ("masterClassName".equalsIgnoreCase(parameterName)) {
				masterClassName.loadFromIff(objectTemplateList, iff);
			} else  {
				LOGGER.trace("Unexpected parameter {}", parameterName);
			}

			iff.exitChunk();
		}
		iff.exitForm();

		super.load(iff);
		iff.exitForm();
	}

}

