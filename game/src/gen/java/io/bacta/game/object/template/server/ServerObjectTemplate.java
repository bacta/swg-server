package io.bacta.game.object.template.server;

import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.utility.*;
import io.bacta.template.definition.TemplateDefinition;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@Slf4j
@TemplateDefinition
public class ServerObjectTemplate extends ObjectTemplate {
	public static final int TAG_SERVEROBJECTTEMPLATE = Tag.convertStringToTag("SWOO");

	private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
		objectTemplateList.registerTemplate(ServerObjectTemplate.TAG_SERVEROBJECTTEMPLATE, ServerObjectTemplate::new);
		objectTemplateList.registerTemplate(AttribModObjectTemplate.TAG_ATTRIBMOD, AttribModObjectTemplate::new);
		objectTemplateList.registerTemplate(MentalStateModObjectTemplate.TAG_MENTALSTATEMOD, MentalStateModObjectTemplate::new);
		objectTemplateList.registerTemplate(ContentsObjectTemplate.TAG_CONTENTS, ContentsObjectTemplate::new);
		objectTemplateList.registerTemplate(XpObjectTemplate.TAG_XP, XpObjectTemplate::new);
	}

	private int templateVersion;

	// crafting types also defined in base_class.java
	// NOTE: when you update this list, make sure to update the registerMe() function in ServerObjectTemplate.cpp
	// this enum is also defined in the shared draft_schematic_object_template.tdf file
	// this enum is also defined in the shared draft_schematic_object_template.tdf file
	private final StringParam sharedTemplate = new StringParam(); //template the client should associate with this template
	private final List<StringParam> scripts = new ArrayList<>(); //scripts attached to the object
	private boolean scriptsLoaded;
	private boolean scriptsAppend;
	private final DynamicVariableParam objvars = new DynamicVariableParam(); //default objvars added to the object
	private final IntegerParam volume = new IntegerParam(); //how much room does the object take up
	private final List<IntegerParam> visibleFlags = new ArrayList<>(); //who can see this object
	private boolean visibleFlagsLoaded;
	private boolean visibleFlagsAppend;
	private final List<IntegerParam> deleteFlags = new ArrayList<>(); //who can delete this object
	private boolean deleteFlagsLoaded;
	private boolean deleteFlagsAppend;
	private final List<IntegerParam> moveFlags = new ArrayList<>(); //who can move this object
	private boolean moveFlagsLoaded;
	private boolean moveFlagsAppend;
	private final BoolParam invulnerable = new BoolParam(); //can this object not be destroyed/killed
	private final FloatParam complexity = new FloatParam(); //how hard this item is to craft (?)
	private final IntegerParam tintIndex = new IntegerParam(); //index into client tint palette
	private final FloatParam[] updateRanges = new FloatParam[] { //distances for network updates
		new FloatParam(),
		new FloatParam(),
		new FloatParam(),
	};
	private final List<StructParam<ObjectTemplate>> contents = new ArrayList<>(); //what's in this object
	private boolean contentsLoaded;
	private boolean contentsAppend;
	private final List<StructParam<ObjectTemplate>> xpPoints = new ArrayList<>(); //experience points for interacting with this object
	private boolean xpPointsLoaded;
	private boolean xpPointsAppend;
	private final BoolParam persistByDefault = new BoolParam(); //flag to automatically persist this object on creation
	private final BoolParam persistContents = new BoolParam(); //flag that this container persists its contents

	public ServerObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
		super(filename, objectTemplateList);
	}

	@Override
	public int getId() { return TAG_SERVEROBJECTTEMPLATE; }

	public String getSharedTemplate() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!sharedTemplate.isLoaded()) {
			if (base == null) {
				return null;
			} else {
				return base.getSharedTemplate();
			}
		}

		String value = this.sharedTemplate.getValue();
		return value;
	}

	public String getScripts(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!scriptsLoaded) {
			if (base == null) {
				return "";
			} else {
				return base.getScripts(index);
			}
		}

		if (scriptsAppend && base != null) {
			int baseCount = base.getScriptsCount();

			if (index < baseCount) {
				return base.getScripts(index);
			}
			index -= baseCount;
		}
		String value = this.scripts.get(index).getValue();
		return value;
	}

	public int getScriptsCount() {
		if (!scriptsLoaded) {
			if (baseData == null)
				return 0;

		final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			return base.getScriptsCount();
		}

		int count = scripts.size();

		if (scriptsAppend && baseData != null) {
			final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			count += base.getScriptsCount();
		}

		return count;
	}

	public int getVolume() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!volume.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getVolume();
			}
		}

		int value = this.volume.getValue();
		final byte delta = this.volume.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getVolume();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getVolumeMin() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!volume.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getVolumeMin();
			}
		}

		int value = this.volume.getMinValue();
		final byte delta = this.volume.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getVolumeMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getVolumeMax() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!volume.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getVolumeMax();
			}
		}

		int value = this.volume.getMaxValue();
		final byte delta = this.volume.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getVolumeMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public VisibleFlags getVisibleFlags(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!visibleFlagsLoaded) {
			if (base == null) {
				return VisibleFlags.from(0);
			} else {
				return base.getVisibleFlags(index);
			}
		}

		if (visibleFlagsAppend && base != null) {
			int baseCount = base.getVisibleFlagsCount();

			if (index < baseCount) {
				return base.getVisibleFlags(index);
			}
			index -= baseCount;
		}
		return VisibleFlags.from(visibleFlags.get(index).getValue());
	}

	public int getVisibleFlagsCount() {
		if (!visibleFlagsLoaded) {
			if (baseData == null)
				return 0;

		final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			return base.getVisibleFlagsCount();
		}

		int count = visibleFlags.size();

		if (visibleFlagsAppend && baseData != null) {
			final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			count += base.getVisibleFlagsCount();
		}

		return count;
	}

	public DeleteFlags getDeleteFlags(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!deleteFlagsLoaded) {
			if (base == null) {
				return DeleteFlags.from(0);
			} else {
				return base.getDeleteFlags(index);
			}
		}

		if (deleteFlagsAppend && base != null) {
			int baseCount = base.getDeleteFlagsCount();

			if (index < baseCount) {
				return base.getDeleteFlags(index);
			}
			index -= baseCount;
		}
		return DeleteFlags.from(deleteFlags.get(index).getValue());
	}

	public int getDeleteFlagsCount() {
		if (!deleteFlagsLoaded) {
			if (baseData == null)
				return 0;

		final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			return base.getDeleteFlagsCount();
		}

		int count = deleteFlags.size();

		if (deleteFlagsAppend && baseData != null) {
			final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			count += base.getDeleteFlagsCount();
		}

		return count;
	}

	public MoveFlags getMoveFlags(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!moveFlagsLoaded) {
			if (base == null) {
				return MoveFlags.from(0);
			} else {
				return base.getMoveFlags(index);
			}
		}

		if (moveFlagsAppend && base != null) {
			int baseCount = base.getMoveFlagsCount();

			if (index < baseCount) {
				return base.getMoveFlags(index);
			}
			index -= baseCount;
		}
		return MoveFlags.from(moveFlags.get(index).getValue());
	}

	public int getMoveFlagsCount() {
		if (!moveFlagsLoaded) {
			if (baseData == null)
				return 0;

		final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			return base.getMoveFlagsCount();
		}

		int count = moveFlags.size();

		if (moveFlagsAppend && baseData != null) {
			final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			count += base.getMoveFlagsCount();
		}

		return count;
	}

	public boolean getInvulnerable() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!invulnerable.isLoaded()) {
			if (base == null) {
				return false;
			} else {
				return base.getInvulnerable();
			}
		}

		boolean value = this.invulnerable.getValue();
		return value;
	}

	public float getComplexity() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!complexity.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getComplexity();
			}
		}

		float value = this.complexity.getValue();
		final byte delta = this.complexity.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getComplexity();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getComplexityMin() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!complexity.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getComplexityMin();
			}
		}

		float value = this.complexity.getMinValue();
		final byte delta = this.complexity.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getComplexityMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getComplexityMax() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!complexity.isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getComplexityMax();
			}
		}

		float value = this.complexity.getMaxValue();
		final byte delta = this.complexity.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getComplexityMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getTintIndex() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!tintIndex.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getTintIndex();
			}
		}

		int value = this.tintIndex.getValue();
		final byte delta = this.tintIndex.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getTintIndex();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getTintIndexMin() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!tintIndex.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getTintIndexMin();
			}
		}

		int value = this.tintIndex.getMinValue();
		final byte delta = this.tintIndex.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getTintIndexMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getTintIndexMax() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!tintIndex.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getTintIndexMax();
			}
		}

		int value = this.tintIndex.getMaxValue();
		final byte delta = this.tintIndex.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getTintIndexMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getUpdateRanges(UpdateRanges index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!updateRanges[(int)index.value].isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getUpdateRanges(index);
			}
		}

		float value = this.updateRanges[(int)index.value].getValue();
		final byte delta = this.updateRanges[(int)index.value].getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getUpdateRanges(index);
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getUpdateRangesMin(UpdateRanges index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!updateRanges[(int)index.value].isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getUpdateRangesMin(index);
			}
		}

		float value = this.updateRanges[(int)index.value].getMinValue();
		final byte delta = this.updateRanges[(int)index.value].getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getUpdateRangesMin(index);
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public float getUpdateRangesMax(UpdateRanges index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!updateRanges[(int)index.value].isLoaded()) {
			if (base == null) {
				return 0.0f;
			} else {
				return base.getUpdateRangesMax(index);
			}
		}

		float value = this.updateRanges[(int)index.value].getMaxValue();
		final byte delta = this.updateRanges[(int)index.value].getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			float baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getUpdateRangesMax(index);
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (float)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (float)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public Contents getContents(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!contentsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getContents(index);
			}
		}

		if (contentsAppend && base != null) {
			int baseCount = base.getContentsCount();

			if (index < baseCount) {
				return base.getContents(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = contents.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final ContentsObjectTemplate param = (ContentsObjectTemplate)structTemplate;

		final Contents data = new Contents();
			data.slotName = param.getSlotName();
			data.equipObject = param.getEquipObject();
			data.content = param.getContent();

		return data;
	}

	public Contents getContentsMin(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!contentsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getContentsMin(index);
			}
		}

		if (contentsAppend && base != null) {
			int baseCount = base.getContentsCount();

			if (index < baseCount) {
				return base.getContentsMin(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = contents.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final ContentsObjectTemplate param = (ContentsObjectTemplate)structTemplate;

		final Contents data = new Contents();
			data.slotName = param.getSlotName();
			data.equipObject = param.getEquipObject();
			data.content = param.getContent();

		return data;
	}

	public Contents getContentsMax(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!contentsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getContentsMax(index);
			}
		}

		if (contentsAppend && base != null) {
			int baseCount = base.getContentsCount();

			if (index < baseCount) {
				return base.getContentsMax(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = contents.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final ContentsObjectTemplate param = (ContentsObjectTemplate)structTemplate;

		final Contents data = new Contents();
			data.slotName = param.getSlotName();
			data.equipObject = param.getEquipObject();
			data.content = param.getContent();

		return data;
	}

	public int getContentsCount() {
		if (!contentsLoaded) {
			if (baseData == null)
				return 0;

		final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			return base.getContentsCount();
		}

		int count = contents.size();

		if (contentsAppend && baseData != null) {
			final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			count += base.getContentsCount();
		}

		return count;
	}

	public Xp getXpPoints(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!xpPointsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getXpPoints(index);
			}
		}

		if (xpPointsAppend && base != null) {
			int baseCount = base.getXpPointsCount();

			if (index < baseCount) {
				return base.getXpPoints(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = xpPoints.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final XpObjectTemplate param = (XpObjectTemplate)structTemplate;

		final Xp data = new Xp();
			data.type = param.getType();
			data.level = param.getLevel();
			data.value = param.getValue();

		return data;
	}

	public Xp getXpPointsMin(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!xpPointsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getXpPointsMin(index);
			}
		}

		if (xpPointsAppend && base != null) {
			int baseCount = base.getXpPointsCount();

			if (index < baseCount) {
				return base.getXpPointsMin(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = xpPoints.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final XpObjectTemplate param = (XpObjectTemplate)structTemplate;

		final Xp data = new Xp();
			data.type = param.getType();
			data.level = param.getLevelMin();
			data.value = param.getValueMin();

		return data;
	}

	public Xp getXpPointsMax(int index) {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!xpPointsLoaded) {
			if (base == null) {
				return null;
			} else {
				return base.getXpPointsMax(index);
			}
		}

		if (xpPointsAppend && base != null) {
			int baseCount = base.getXpPointsCount();

			if (index < baseCount) {
				return base.getXpPointsMax(index);
			}
			index -= baseCount;
		}
		final ObjectTemplate structTemplate = xpPoints.get(index).getValue();
		Preconditions.checkNotNull(structTemplate);
		final XpObjectTemplate param = (XpObjectTemplate)structTemplate;

		final Xp data = new Xp();
			data.type = param.getType();
			data.level = param.getLevelMax();
			data.value = param.getValueMax();

		return data;
	}

	public int getXpPointsCount() {
		if (!xpPointsLoaded) {
			if (baseData == null)
				return 0;

		final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			return base.getXpPointsCount();
		}

		int count = xpPoints.size();

		if (xpPointsAppend && baseData != null) {
			final ServerObjectTemplate base = (ServerObjectTemplate)baseData;
			count += base.getXpPointsCount();
		}

		return count;
	}

	public boolean getPersistByDefault() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!persistByDefault.isLoaded()) {
			if (base == null) {
				return false;
			} else {
				return base.getPersistByDefault();
			}
		}

		boolean value = this.persistByDefault.getValue();
		return value;
	}

	public boolean getPersistContents() {
		ServerObjectTemplate base = null;

		if (baseData instanceof ServerObjectTemplate)
			base = (ServerObjectTemplate)baseData;

		if (!persistContents.isLoaded()) {
			if (base == null) {
				return false;
			} else {
				return base.getPersistContents();
			}
		}

		boolean value = this.persistContents.getValue();
		return value;
	}

	@Override
	protected void load(final Iff iff) {
		if (iff.getCurrentName() != TAG_SERVEROBJECTTEMPLATE) {
			return;
		}

		iff.enterForm();
		templateVersion = iff.getCurrentName();

		if (templateVersion == Tag.TAG_DERV) {
			iff.enterForm();
			iff.enterChunk();
			final String baseFilename = iff.readString();
			iff.exitChunk();
			final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
			Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
			if (baseData == base && base != null) {
				base.releaseReference();
			} else {
				if (baseData != null)
					baseData.releaseReference();
				baseData = base;
			}
			iff.exitForm();
			templateVersion = iff.getCurrentName();
		}

		iff.enterForm();
		iff.enterChunk();
		final int paramCount = iff.readInt();
		iff.exitChunk();
		for (int i = 0; i < paramCount; ++i) {
			iff.enterChunk();
			final String parameterName = iff.readString();

			if ("sharedTemplate".equalsIgnoreCase(parameterName)) {
				sharedTemplate.loadFromIff(objectTemplateList, iff);
			} else if ("scripts".equalsIgnoreCase(parameterName)) {
				scripts.clear();
				scriptsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final StringParam newData = new StringParam();
					newData.loadFromIff(objectTemplateList, iff);
					scripts.add(newData);
				}
				scriptsLoaded = true;
			} else if ("objvars".equalsIgnoreCase(parameterName)) {
				objvars.loadFromIff(objectTemplateList, iff);
			} else if ("volume".equalsIgnoreCase(parameterName)) {
				volume.loadFromIff(objectTemplateList, iff);
			} else if ("visibleFlags".equalsIgnoreCase(parameterName)) {
				visibleFlags.clear();
				visibleFlagsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final IntegerParam newData = new IntegerParam();
					newData.loadFromIff(objectTemplateList, iff);
					visibleFlags.add(newData);
				}
				visibleFlagsLoaded = true;
			} else if ("deleteFlags".equalsIgnoreCase(parameterName)) {
				deleteFlags.clear();
				deleteFlagsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final IntegerParam newData = new IntegerParam();
					newData.loadFromIff(objectTemplateList, iff);
					deleteFlags.add(newData);
				}
				deleteFlagsLoaded = true;
			} else if ("moveFlags".equalsIgnoreCase(parameterName)) {
				moveFlags.clear();
				moveFlagsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final IntegerParam newData = new IntegerParam();
					newData.loadFromIff(objectTemplateList, iff);
					moveFlags.add(newData);
				}
				moveFlagsLoaded = true;
			} else if ("invulnerable".equalsIgnoreCase(parameterName)) {
				invulnerable.loadFromIff(objectTemplateList, iff);
			} else if ("complexity".equalsIgnoreCase(parameterName)) {
				complexity.loadFromIff(objectTemplateList, iff);
			} else if ("tintIndex".equalsIgnoreCase(parameterName)) {
				tintIndex.loadFromIff(objectTemplateList, iff);
			} else if ("updateRanges".equalsIgnoreCase(parameterName)) {
				int listCount = iff.readInt();
				int j;
				for (j = 0; j < 3 && j < listCount; ++j)
					updateRanges[j].loadFromIff(objectTemplateList, iff);
				for (; j < listCount; ++j) {
					final FloatParam dummy = new FloatParam();
					dummy.loadFromIff(objectTemplateList, iff);
				}
			} else if ("contents".equalsIgnoreCase(parameterName)) {
				contents.clear();
				contentsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final StructParam<ObjectTemplate> newData = new StructParam<ObjectTemplate>();
					newData.loadFromIff(objectTemplateList, iff);
					contents.add(newData);
				}
				contentsLoaded = true;
			} else if ("xpPoints".equalsIgnoreCase(parameterName)) {
				xpPoints.clear();
				xpPointsAppend = iff.readBoolean();
				int listCount = iff.readInt();
				for (int j = 0; j < listCount; ++j) {
					final StructParam<ObjectTemplate> newData = new StructParam<ObjectTemplate>();
					newData.loadFromIff(objectTemplateList, iff);
					xpPoints.add(newData);
				}
				xpPointsLoaded = true;
			} else if ("persistByDefault".equalsIgnoreCase(parameterName)) {
				persistByDefault.loadFromIff(objectTemplateList, iff);
			} else if ("persistContents".equalsIgnoreCase(parameterName)) {
				persistContents.loadFromIff(objectTemplateList, iff);
			} else  {
				LOGGER.trace("Unexpected parameter {}", parameterName);
			}

			iff.exitChunk();
		}
		iff.exitForm();
	}

	public enum ArmorRating {
		AR_armorNone(0), 
		AR_armorLight(1), 
		AR_armorMedium(2), 
		AR_armorHeavy(3), 
		ArmorRating_Last(AR_armorHeavy.value);

		private static final ArmorRating[] values = values();
		public final long value;
		ArmorRating(final long value) { this.value = value; }
		public static ArmorRating from(final long value) {
			for (final ArmorRating e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum ArmorRating", value));
		}
	}

	public enum VisibleFlags {
		VF_gm(0), 
		VF_player(1), 
		VisibleFlags_Last(VF_player.value);

		private static final VisibleFlags[] values = values();
		public final long value;
		VisibleFlags(final long value) { this.value = value; }
		public static VisibleFlags from(final long value) {
			for (final VisibleFlags e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum VisibleFlags", value));
		}
	}

	public enum CraftingType {
		CT_weapon(0x00000001), 
		CT_armor(0x00000002), 
		CT_food(0x00000004), 
		CT_clothing(0x00000008), 
		CT_vehicle(0x00000010), 
		CT_droid(0x00000020), 
		CT_chemical(0x00000040), 
		CT_plantBreeding(0x00000080), 
		CT_animalBreeding(0x00000100), 
		CT_furniture(0x00000200), 
		CT_installation(0x00000400), 
		CT_lightsaber(0x00000800), 
		CT_genericItem(0x00001000), 
		CT_genetics(0x00002000), 
		CT_mandalorianTailor(0x00004000), 
		CT_mandalorianArmorsmith(0x00008000), 
		CT_mandalorianDroidEngineer(0x00010000), 
		CT_space(0x00020000), 
		CT_reverseEngineering(0x00040000), 
		CT_misc(0x00080000), 
		CT_spaceComponent(0x00100000), 
		CT_mission(0x80000000), 
		CT_weaponMission(0x80000001), 
		CT_armorMission(0x80000002), 
		CT_foodMission(0x80000004), 
		CT_clothingMission(0x80000008), 
		CT_vehicleMission(0x80000010), 
		CT_droidMission(0x80000020), 
		CT_chemicalMission(0x80000040), 
		CT_plantBreedingMission(0x80000080), 
		CT_animalBreedingMission(0x80000100), 
		CT_furnitureMission(0x80000200), 
		CT_installationMission(0x80000400), 
		CT_lightsaberMission(0x80000800), 
		CT_genericItemMission(0x80001000), 
		CT_geneticsMission(0x80002000), 
		CT_mandalorianTailorMission(0x80004000), 
		CT_mandalorianArmorsmithMission(0x80008000), 
		CT_mandalorianDroidEngineerMission(0x80010000), 
		CT_spaceMission(0x80020000), 
		CT_reverseEngineeringMission(0x80040000), 
		CT_miscMission(0x80080000), 
		CT_spaceComponentMission(0x80100000), 
		CraftingType_Last(CT_spaceComponentMission.value);

		private static final CraftingType[] values = values();
		public final long value;
		CraftingType(final long value) { this.value = value; }
		public static CraftingType from(final long value) {
			for (final CraftingType e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum CraftingType", value));
		}
	}

	public enum UpdateRanges {
		UR_near(0), 
		UR_normal(1), 
		UR_far(2), 
		UpdateRanges_Last(UR_far.value);

		private static final UpdateRanges[] values = values();
		public final long value;
		UpdateRanges(final long value) { this.value = value; }
		public static UpdateRanges from(final long value) {
			for (final UpdateRanges e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum UpdateRanges", value));
		}
	}

	public enum ArmorCategory {
		AC_reconnaissance(0), 
		AC_battle(1), 
		AC_assault(2), 
		AC_psg(3), // personal shield generator
		ArmorCategory_Last(AC_psg.value);

		private static final ArmorCategory[] values = values();
		public final long value;
		ArmorCategory(final long value) { this.value = value; }
		public static ArmorCategory from(final long value) {
			for (final ArmorCategory e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum ArmorCategory", value));
		}
	}

	public enum MentalStates {
		MS_fear(0), 
		MS_anger(1), 
		MS_interest(2), 
		MS_distress(3), 
		MentalStates_Last(MS_distress.value);

		private static final MentalStates[] values = values();
		public final long value;
		MentalStates(final long value) { this.value = value; }
		public static MentalStates from(final long value) {
			for (final MentalStates e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum MentalStates", value));
		}
	}

	public enum Attributes {
		AT_health(0), 
		AT_constitution(1), 
		AT_action(2), 
		AT_stamina(3), 
		AT_mind(4), 
		AT_willpower(5), 
		Attributes_Last(AT_willpower.value);

		private static final Attributes[] values = values();
		public final long value;
		Attributes(final long value) { this.value = value; }
		public static Attributes from(final long value) {
			for (final Attributes e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum Attributes", value));
		}
	}

	public enum XpTypes {
		XP_rangedCombat(0), 
		XP_meleeCombat(1), 
		XP_tamingNoTime(2), 
		XP_tamingShortTime(3), 
		XP_tamingMediumTime(4), 
		XP_tamingLargeTime(5), 
		XP_architect(6), 
		XP_botany(7), 
		XP_bountyHunter(8), 
		XP_chemist(9), 
		XP_dancing(10), 
		XP_facilityManagementSavings(11), 
		XP_facilityManagementWearAndTear(12), 
		XP_squadLeaderNoTime(13), 
		XP_squadLeaderSmallTime(14), 
		XP_squadLeaderMediumTime(15), 
		XP_squadLeaderLargeTime(16), 
		XP_hairdressing(17), 
		XP_holonetSlicingPopularity(18), 
		XP_holonetSlicingQuantity(19), 
		XP_investigation(20), 
		XP_medic(21), 
		XP_military(22), 
		XP_mining(23), 
		XP_miningSavings(24), 
		XP_musician(25), 
		XP_musicanPopularity(26), 
		XP_politics(27), 
		XP_slicing(28), 
		XP_smuggling(29), 
		XP_surveyingNoMinimum(30), 
		XP_surveyingLowMinimum(31), 
		XP_surveyingMediumMinimum(32), 
		XP_surveyingHighMinimum(33), 
		XP_survivalHealing(34), 
		XP_survivalTracking(35), 
		XP_vehicularControl(36), 
		XP_vehicularWearAndTear(37), 
		XP_resourceHarvestingOrganic(38), 
		XP_resourceHarvestingInorganic(39), 
		XP_crafting(40), 
		XP_craftingClothing(41), 
		XP_craftingClothingArmor(42), 
		XP_craftingDroid(43), 
		XP_craftingFood(44), 
		XP_craftingMedicine(45), 
		XP_craftingStructure(46), 
		XP_craftingWeapons(47), 
		XP_craftingWeaponsMelee(48), 
		XP_craftingWeaponsRanged(49), 
		XP_craftingWeaponsMunition(50), 
		XP_industrialist(51), 
		XP_craftingScout(52), 
		XP_craftingCreature(53), 
		XP_craftingTissue(54), 
		XP_craftingCamp(55), 
		XP_craftingTrapping(56), 
		XP_craftingSpice(57), 
		XP_jediGeneral(58), 
		XP_shipwright(59), 
		XP_reverseEngineering(60), 
		XpTypes_Last(XP_reverseEngineering.value);

		private static final XpTypes[] values = values();
		public final long value;
		XpTypes(final long value) { this.value = value; }
		public static XpTypes from(final long value) {
			for (final XpTypes e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum XpTypes", value));
		}
	}

	public enum MoveFlags {
		MF_gm(0), 
		MF_player(1), 
		MoveFlags_Last(MF_player.value);

		private static final MoveFlags[] values = values();
		public final long value;
		MoveFlags(final long value) { this.value = value; }
		public static MoveFlags from(final long value) {
			for (final MoveFlags e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum MoveFlags", value));
		}
	}

	public enum DeleteFlags {
		DF_gm(0), 
		DF_player(1), 
		DeleteFlags_Last(DF_player.value);

		private static final DeleteFlags[] values = values();
		public final long value;
		DeleteFlags(final long value) { this.value = value; }
		public static DeleteFlags from(final long value) {
			for (final DeleteFlags e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum DeleteFlags", value));
		}
	}

	public enum DamageType {
		DT_none(0x00000000), 
		DT_kinetic(0x00000001), 
		DT_energy(0x00000002), 
		DT_blast(0x00000004), 
		DT_stun(0x00000008), 
		DT_restraint(0x00000010), 
		DT_elemental_heat(0x00000020), 
		DT_elemental_cold(0x00000040), 
		DT_elemental_acid(0x00000080), 
		DT_elemental_electrical(0x00000100), 
		DT_environmental_heat(0x00000200), 
		DT_environmental_cold(0x00000400), 
		DT_environmental_acid(0x00000800), 
		DT_environmental_electrical(0x00001000), 
		DamageType_Last(DT_environmental_electrical.value);

		private static final DamageType[] values = values();
		public final long value;
		DamageType(final long value) { this.value = value; }
		public static DamageType from(final long value) {
			for (final DamageType e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum DamageType", value));
		}
	}

	public enum ArmorLevel {
		AL_basic(0), 
		AL_standard(1), 
		AL_advanced(2), 
		ArmorLevel_Last(AL_advanced.value);

		private static final ArmorLevel[] values = values();
		public final long value;
		ArmorLevel(final long value) { this.value = value; }
		public static ArmorLevel from(final long value) {
			for (final ArmorLevel e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum ArmorLevel", value));
		}
	}

	public static class AttribMod {
		@Getter protected Attributes target;
		@Getter protected int value;
		@Getter protected float time;
		@Getter protected float timeAtValue;
		@Getter protected float decay;
	}

	protected static class AttribModObjectTemplate extends ObjectTemplate {
		public static final int TAG_ATTRIBMOD = Tag.convertStringToTag("ATTS");

		public AttribModObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
			super(filename, objectTemplateList);
		}

		private final IntegerParam target = new IntegerParam(); //server        //which attribute is affected
		private final IntegerParam value = new IntegerParam(); //server        //max strength of the modifier
		private final FloatParam time = new FloatParam(); //server        //how long it takes for the modifier to reach full strength (in secs)
		private final FloatParam timeAtValue = new FloatParam(); //server        //how long the modifier remains at full strength (in secs)
		private final FloatParam decay = new FloatParam(); //server        //how long it takes for the modifier to go from full strength to 0 (in secs)

		@Override
		public int getId() { return TAG_ATTRIBMOD; }

		public Attributes getTarget() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!target.isLoaded()) {
				if (base == null) {
					return Attributes.from(0);
				} else {
					return base.getTarget();
				}
			}

			return Attributes.from(target.getValue());
		}

		public int getValue() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getValue();
				}
			}

			int value = this.value.getValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValue();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getValueMin() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getValueMin();
				}
			}

			int value = this.value.getMinValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValueMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getValueMax() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getValueMax();
				}
			}

			int value = this.value.getMaxValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValueMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTime() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!time.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTime();
				}
			}

			float value = this.time.getValue();
			final byte delta = this.time.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTime();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeMin() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!time.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeMin();
				}
			}

			float value = this.time.getMinValue();
			final byte delta = this.time.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeMax() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!time.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeMax();
				}
			}

			float value = this.time.getMaxValue();
			final byte delta = this.time.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeAtValue() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!timeAtValue.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeAtValue();
				}
			}

			float value = this.timeAtValue.getValue();
			final byte delta = this.timeAtValue.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeAtValue();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeAtValueMin() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!timeAtValue.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeAtValueMin();
				}
			}

			float value = this.timeAtValue.getMinValue();
			final byte delta = this.timeAtValue.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeAtValueMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeAtValueMax() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!timeAtValue.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeAtValueMax();
				}
			}

			float value = this.timeAtValue.getMaxValue();
			final byte delta = this.timeAtValue.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeAtValueMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getDecay() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!decay.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getDecay();
				}
			}

			float value = this.decay.getValue();
			final byte delta = this.decay.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getDecay();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getDecayMin() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!decay.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getDecayMin();
				}
			}

			float value = this.decay.getMinValue();
			final byte delta = this.decay.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getDecayMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getDecayMax() {
			AttribModObjectTemplate base = null;

			if (baseData instanceof AttribModObjectTemplate)
				base = (AttribModObjectTemplate)baseData;

			if (!decay.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getDecayMax();
				}
			}

			float value = this.decay.getMaxValue();
			final byte delta = this.decay.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getDecayMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		@Override
		protected void load(final Iff iff) {
			iff.enterForm();
			iff.enterChunk();
			final int paramCount = iff.readInt();
			iff.exitChunk();
			for (int i = 0; i < paramCount; ++i) {
				iff.enterChunk();
				final String parameterName = iff.readString();

				if ("target".equalsIgnoreCase(parameterName)) {
					target.loadFromIff(objectTemplateList, iff);
				} else if ("value".equalsIgnoreCase(parameterName)) {
					value.loadFromIff(objectTemplateList, iff);
				} else if ("time".equalsIgnoreCase(parameterName)) {
					time.loadFromIff(objectTemplateList, iff);
				} else if ("timeAtValue".equalsIgnoreCase(parameterName)) {
					timeAtValue.loadFromIff(objectTemplateList, iff);
				} else if ("decay".equalsIgnoreCase(parameterName)) {
					decay.loadFromIff(objectTemplateList, iff);
				} else  {
					LOGGER.trace("Unexpected parameter {}", parameterName);
				}

				iff.exitChunk();
			}
			iff.exitForm();
		}

	}

	public static class MentalStateMod {
		@Getter protected MentalStates target;
		@Getter protected float value;
		@Getter protected float time;
		@Getter protected float timeAtValue;
		@Getter protected float decay;
	}

	protected static class MentalStateModObjectTemplate extends ObjectTemplate {
		public static final int TAG_MENTALSTATEMOD = Tag.convertStringToTag("MESM");

		public MentalStateModObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
			super(filename, objectTemplateList);
		}

		private final IntegerParam target = new IntegerParam(); //server       //which mental state is affected
		private final FloatParam value = new FloatParam(); //server       //max strength of the modifier
		private final FloatParam time = new FloatParam(); //server       //how long it takes for the modifier to reach full strength (in secs)
		private final FloatParam timeAtValue = new FloatParam(); //server       //how long the modifier remains at full strength (in secs)
		private final FloatParam decay = new FloatParam(); //server       //how long it takes for the modifier to go from full strength to 0 (in secs)

		@Override
		public int getId() { return TAG_MENTALSTATEMOD; }

		public MentalStates getTarget() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!target.isLoaded()) {
				if (base == null) {
					return MentalStates.from(0);
				} else {
					return base.getTarget();
				}
			}

			return MentalStates.from(target.getValue());
		}

		public float getValue() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getValue();
				}
			}

			float value = this.value.getValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValue();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getValueMin() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getValueMin();
				}
			}

			float value = this.value.getMinValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValueMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getValueMax() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getValueMax();
				}
			}

			float value = this.value.getMaxValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValueMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTime() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!time.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTime();
				}
			}

			float value = this.time.getValue();
			final byte delta = this.time.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTime();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeMin() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!time.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeMin();
				}
			}

			float value = this.time.getMinValue();
			final byte delta = this.time.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeMax() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!time.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeMax();
				}
			}

			float value = this.time.getMaxValue();
			final byte delta = this.time.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeAtValue() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!timeAtValue.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeAtValue();
				}
			}

			float value = this.timeAtValue.getValue();
			final byte delta = this.timeAtValue.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeAtValue();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeAtValueMin() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!timeAtValue.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeAtValueMin();
				}
			}

			float value = this.timeAtValue.getMinValue();
			final byte delta = this.timeAtValue.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeAtValueMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getTimeAtValueMax() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!timeAtValue.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getTimeAtValueMax();
				}
			}

			float value = this.timeAtValue.getMaxValue();
			final byte delta = this.timeAtValue.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getTimeAtValueMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getDecay() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!decay.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getDecay();
				}
			}

			float value = this.decay.getValue();
			final byte delta = this.decay.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getDecay();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getDecayMin() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!decay.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getDecayMin();
				}
			}

			float value = this.decay.getMinValue();
			final byte delta = this.decay.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getDecayMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public float getDecayMax() {
			MentalStateModObjectTemplate base = null;

			if (baseData instanceof MentalStateModObjectTemplate)
				base = (MentalStateModObjectTemplate)baseData;

			if (!decay.isLoaded()) {
				if (base == null) {
					return 0.0f;
				} else {
					return base.getDecayMax();
				}
			}

			float value = this.decay.getMaxValue();
			final byte delta = this.decay.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				float baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getDecayMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (float)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (float)(baseValue * (value / 100.0f));
			}
			return value;
		}

		@Override
		protected void load(final Iff iff) {
			iff.enterForm();
			iff.enterChunk();
			final int paramCount = iff.readInt();
			iff.exitChunk();
			for (int i = 0; i < paramCount; ++i) {
				iff.enterChunk();
				final String parameterName = iff.readString();

				if ("target".equalsIgnoreCase(parameterName)) {
					target.loadFromIff(objectTemplateList, iff);
				} else if ("value".equalsIgnoreCase(parameterName)) {
					value.loadFromIff(objectTemplateList, iff);
				} else if ("time".equalsIgnoreCase(parameterName)) {
					time.loadFromIff(objectTemplateList, iff);
				} else if ("timeAtValue".equalsIgnoreCase(parameterName)) {
					timeAtValue.loadFromIff(objectTemplateList, iff);
				} else if ("decay".equalsIgnoreCase(parameterName)) {
					decay.loadFromIff(objectTemplateList, iff);
				} else  {
					LOGGER.trace("Unexpected parameter {}", parameterName);
				}

				iff.exitChunk();
			}
			iff.exitForm();
		}

	}

	public static class Contents {
		@Getter protected String slotName;
		@Getter protected boolean equipObject;
		@Getter protected ObjectTemplate content;
	}

	protected static class ContentsObjectTemplate extends ObjectTemplate {
		public static final int TAG_CONTENTS = Tag.convertStringToTag("CONT");

		public ContentsObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
			super(filename, objectTemplateList);
		}

		private final StringParam slotName = new StringParam(); //slot name, as defined in the object's slotDescriptorFilename
		private final BoolParam equipObject = new BoolParam(); //flag to put the contents in the slot, as opposed to adding it to the container in the slot
		private final StringParam content = new StringParam(); //the object to add

		@Override
		public int getId() { return TAG_CONTENTS; }

		public String getSlotName() {
			ContentsObjectTemplate base = null;

			if (baseData instanceof ContentsObjectTemplate)
				base = (ContentsObjectTemplate)baseData;

			if (!slotName.isLoaded()) {
				if (base == null) {
					return "";
				} else {
					return base.getSlotName();
				}
			}

			String value = this.slotName.getValue();
			return value;
		}

		public boolean getEquipObject() {
			ContentsObjectTemplate base = null;

			if (baseData instanceof ContentsObjectTemplate)
				base = (ContentsObjectTemplate)baseData;

			if (!equipObject.isLoaded()) {
				if (base == null) {
					return false;
				} else {
					return base.getEquipObject();
				}
			}

			boolean value = this.equipObject.getValue();
			return value;
		}

		public ServerObjectTemplate getContent() {
			ContentsObjectTemplate base = null;

			if (baseData instanceof ContentsObjectTemplate)
				base = (ContentsObjectTemplate)baseData;

			if (!content.isLoaded()) {
				if (base == null) {
					return null;
				} else {
					return base.getContent();
				}
			}

			ServerObjectTemplate returnValue = null;
			final String templateName = content.getValue();

			if (!templateName.isEmpty()) {
				returnValue = objectTemplateList.fetch(templateName);

				 if (returnValue == null)
					throw new IllegalStateException(String.format("error loading template %s", templateName));
			}

			return returnValue;
		}

		@Override
		protected void load(final Iff iff) {
			iff.enterForm();
			iff.enterChunk();
			final int paramCount = iff.readInt();
			iff.exitChunk();
			for (int i = 0; i < paramCount; ++i) {
				iff.enterChunk();
				final String parameterName = iff.readString();

				if ("slotName".equalsIgnoreCase(parameterName)) {
					slotName.loadFromIff(objectTemplateList, iff);
				} else if ("equipObject".equalsIgnoreCase(parameterName)) {
					equipObject.loadFromIff(objectTemplateList, iff);
				} else if ("content".equalsIgnoreCase(parameterName)) {
					content.loadFromIff(objectTemplateList, iff);
				} else  {
					LOGGER.trace("Unexpected parameter {}", parameterName);
				}

				iff.exitChunk();
			}
			iff.exitForm();
		}

	}

	public static class Xp {
		@Getter protected XpTypes type;
		@Getter protected int level;
		@Getter protected int value;
	}

	protected static class XpObjectTemplate extends ObjectTemplate {
		public static final int TAG_XP = Tag.convertStringToTag("EXPS");

		public XpObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
			super(filename, objectTemplateList);
		}

		private final IntegerParam type = new IntegerParam(); //type of experience earned
		private final IntegerParam level = new IntegerParam(); //difficulty level, 0 for leveless xp types
		private final IntegerParam value = new IntegerParam(); //amount of experience earned

		@Override
		public int getId() { return TAG_XP; }

		public XpTypes getType() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!type.isLoaded()) {
				if (base == null) {
					return XpTypes.from(0);
				} else {
					return base.getType();
				}
			}

			return XpTypes.from(type.getValue());
		}

		public int getLevel() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!level.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getLevel();
				}
			}

			int value = this.level.getValue();
			final byte delta = this.level.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getLevel();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getLevelMin() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!level.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getLevelMin();
				}
			}

			int value = this.level.getMinValue();
			final byte delta = this.level.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getLevelMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getLevelMax() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!level.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getLevelMax();
				}
			}

			int value = this.level.getMaxValue();
			final byte delta = this.level.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getLevelMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getValue() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getValue();
				}
			}

			int value = this.value.getValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValue();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getValueMin() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getValueMin();
				}
			}

			int value = this.value.getMinValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValueMin();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		public int getValueMax() {
			XpObjectTemplate base = null;

			if (baseData instanceof XpObjectTemplate)
				base = (XpObjectTemplate)baseData;

			if (!value.isLoaded()) {
				if (base == null) {
					return 0;
				} else {
					return base.getValueMax();
				}
			}

			int value = this.value.getMaxValue();
			final byte delta = this.value.getDeltaType();

			if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
				int baseValue = 0;

					if (baseData != null) {
						if (base != null)
							baseValue = base.getValueMax();
					}

				if (delta == '+')
					value = baseValue + value;
				if (delta == '-')
					value = baseValue - value;
				if (delta == '=')
					value = baseValue + (int)(baseValue * (value / 100.0f));
				if (delta == '_')
					value = baseValue - (int)(baseValue * (value / 100.0f));
			}
			return value;
		}

		@Override
		protected void load(final Iff iff) {
			iff.enterForm();
			iff.enterChunk();
			final int paramCount = iff.readInt();
			iff.exitChunk();
			for (int i = 0; i < paramCount; ++i) {
				iff.enterChunk();
				final String parameterName = iff.readString();

				if ("type".equalsIgnoreCase(parameterName)) {
					type.loadFromIff(objectTemplateList, iff);
				} else if ("level".equalsIgnoreCase(parameterName)) {
					level.loadFromIff(objectTemplateList, iff);
				} else if ("value".equalsIgnoreCase(parameterName)) {
					value.loadFromIff(objectTemplateList, iff);
				} else  {
					LOGGER.trace("Unexpected parameter {}", parameterName);
				}

				iff.exitChunk();
			}
			iff.exitForm();
		}

	}

}

