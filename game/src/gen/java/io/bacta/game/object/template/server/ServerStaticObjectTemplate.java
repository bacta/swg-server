package io.bacta.game.object.template.server;

import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.utility.BoolParam;
import io.bacta.template.definition.TemplateDefinition;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@Slf4j
@TemplateDefinition
public class ServerStaticObjectTemplate extends ServerObjectTemplate {
	public static final int TAG_SERVERSTATICOBJECTTEMPLATE = Tag.convertStringToTag("STAO");

	private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
		objectTemplateList.registerTemplate(ServerStaticObjectTemplate.TAG_SERVERSTATICOBJECTTEMPLATE, ServerStaticObjectTemplate::new);
	}

	private int templateVersion;

	private final BoolParam clientOnlyBuildout = new BoolParam(); //Whether we should be instantiated from buildout files on the server

	public ServerStaticObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
		super(filename, objectTemplateList);
	}

	@Override
	public int getId() { return TAG_SERVERSTATICOBJECTTEMPLATE; }

	public boolean getClientOnlyBuildout() {
		ServerStaticObjectTemplate base = null;

		if (baseData instanceof ServerStaticObjectTemplate)
			base = (ServerStaticObjectTemplate)baseData;

		if (!clientOnlyBuildout.isLoaded()) {
			if (base == null) {
				return false;
			} else {
				return base.getClientOnlyBuildout();
			}
		}

		boolean value = this.clientOnlyBuildout.getValue();
		return value;
	}

	@Override
	protected void load(final Iff iff) {
		if (iff.getCurrentName() != TAG_SERVERSTATICOBJECTTEMPLATE) {
			super.load(iff);
			return;
		}

		iff.enterForm();
		templateVersion = iff.getCurrentName();

		if (templateVersion == Tag.TAG_DERV) {
			iff.enterForm();
			iff.enterChunk();
			final String baseFilename = iff.readString();
			iff.exitChunk();
			final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
			Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
			if (baseData == base && base != null) {
				base.releaseReference();
			} else {
				if (baseData != null)
					baseData.releaseReference();
				baseData = base;
			}
			iff.exitForm();
			templateVersion = iff.getCurrentName();
		}

		iff.enterForm();
		iff.enterChunk();
		final int paramCount = iff.readInt();
		iff.exitChunk();
		for (int i = 0; i < paramCount; ++i) {
			iff.enterChunk();
			final String parameterName = iff.readString();

			if ("clientOnlyBuildout".equalsIgnoreCase(parameterName)) {
				clientOnlyBuildout.loadFromIff(objectTemplateList, iff);
			} else  {
				LOGGER.trace("Unexpected parameter {}", parameterName);
			}

			iff.exitChunk();
		}
		iff.exitForm();

		super.load(iff);
		iff.exitForm();
	}

}

