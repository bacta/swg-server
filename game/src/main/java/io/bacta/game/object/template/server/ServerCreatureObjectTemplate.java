package io.bacta.game.object.template.server;


import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.template.definition.TemplateDefinition;
import io.bacta.shared.utility.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@TemplateDefinition
public class ServerCreatureObjectTemplate extends ServerTangibleObjectTemplate {
    private static final Logger LOGGER = LoggerFactory.getLogger(ServerCreatureObjectTemplate.class);
    public static final int TAG_SERVERCREATUREOBJECTTEMPLATE = Tag.convertStringToTag("CREO");

    private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
        objectTemplateList.registerTemplate(ServerCreatureObjectTemplate.TAG_SERVERCREATUREOBJECTTEMPLATE, ServerCreatureObjectTemplate::new);
    }

    private int templateVersion;

    //Creature Attributes
    private final StringParam defaultWeapon = new StringParam(); //weapon to use if none is equipped
    private final IntegerParam[] attributes = new IntegerParam[]{ //initial value for attributes
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
    };
    private final IntegerParam[] minAttributes = new IntegerParam[]{ //minimum value for attributes
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
    };
    private final IntegerParam[] maxAttributes = new IntegerParam[]{ //maximum value for attributes
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
            new IntegerParam(),
    };
    private final FloatParam minDrainModifier = new FloatParam(); //min drain rate in units/sec
    private final FloatParam maxDrainModifier = new FloatParam(); //max drain rate in units/sec
    private final FloatParam minFaucetModifier = new FloatParam(); //min regeneration rate in units/sec
    private final FloatParam maxFaucetModifier = new FloatParam(); //max regeneration rate in units/sec
    private final List<StructParam<ObjectTemplate>> attribMods = new ArrayList<>(); //(de)buffs the creature is created with
    private boolean attribModsLoaded;
    private boolean attribModsAppend;
    private final IntegerParam shockWounds = new IntegerParam(); //current shock wounds
    private final BoolParam canCreateAvatar = new BoolParam(); //can a player create an avatar with this template
    private final StringParam nameGeneratorType = new StringParam(); //identifies which name generator to use
    // AI Behavioral Variables
    private final FloatParam approachTriggerRange = new FloatParam();
    private final FloatParam[] maxMentalStates = new FloatParam[]{ //maximum value for the mental state
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
    };
    private final FloatParam[] mentalStatesDecay = new FloatParam[]{ //time for the state to decay from 100 to 0
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
    };

    public ServerCreatureObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
        super(filename, objectTemplateList);
    }

    @Override
    public int getId() {
        return TAG_SERVERCREATUREOBJECTTEMPLATE;
    }

    public ServerWeaponObjectTemplate getDefaultWeapon() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!defaultWeapon.isLoaded()) {
            if (base == null) {
                return null;
            } else {
                return base.getDefaultWeapon();
            }
        }

        ServerWeaponObjectTemplate returnValue = null;
        final String templateName = defaultWeapon.getValue();

        if (!templateName.isEmpty()) {
            returnValue = objectTemplateList.fetch(templateName);

            if (returnValue == null)
                throw new IllegalStateException(String.format("error loading template %s", templateName));
        }

        return returnValue;
    }

    public int getAttributes(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!attributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getAttributes(index);
            }
        }

        int value = this.attributes[(int) index.value].getValue();
        final byte delta = this.attributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAttributes(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getAttributesMin(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!attributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getAttributesMin(index);
            }
        }

        int value = this.attributes[(int) index.value].getMinValue();
        final byte delta = this.attributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAttributesMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getAttributesMax(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!attributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getAttributesMax(index);
            }
        }

        int value = this.attributes[(int) index.value].getMaxValue();
        final byte delta = this.attributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAttributesMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMinAttributes(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minAttributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMinAttributes(index);
            }
        }

        int value = this.minAttributes[(int) index.value].getValue();
        final byte delta = this.minAttributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinAttributes(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMinAttributesMin(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minAttributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMinAttributesMin(index);
            }
        }

        int value = this.minAttributes[(int) index.value].getMinValue();
        final byte delta = this.minAttributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinAttributesMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMinAttributesMax(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minAttributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMinAttributesMax(index);
            }
        }

        int value = this.minAttributes[(int) index.value].getMaxValue();
        final byte delta = this.minAttributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinAttributesMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMaxAttributes(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxAttributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMaxAttributes(index);
            }
        }

        int value = this.maxAttributes[(int) index.value].getValue();
        final byte delta = this.maxAttributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxAttributes(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMaxAttributesMin(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxAttributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMaxAttributesMin(index);
            }
        }

        int value = this.maxAttributes[(int) index.value].getMinValue();
        final byte delta = this.maxAttributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxAttributesMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMaxAttributesMax(Attributes index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxAttributes[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMaxAttributesMax(index);
            }
        }

        int value = this.maxAttributes[(int) index.value].getMaxValue();
        final byte delta = this.maxAttributes[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxAttributesMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMinDrainModifier() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minDrainModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMinDrainModifier();
            }
        }

        float value = this.minDrainModifier.getValue();
        final byte delta = this.minDrainModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinDrainModifier();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMinDrainModifierMin() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minDrainModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMinDrainModifierMin();
            }
        }

        float value = this.minDrainModifier.getMinValue();
        final byte delta = this.minDrainModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinDrainModifierMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMinDrainModifierMax() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minDrainModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMinDrainModifierMax();
            }
        }

        float value = this.minDrainModifier.getMaxValue();
        final byte delta = this.minDrainModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinDrainModifierMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxDrainModifier() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxDrainModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxDrainModifier();
            }
        }

        float value = this.maxDrainModifier.getValue();
        final byte delta = this.maxDrainModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxDrainModifier();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxDrainModifierMin() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxDrainModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxDrainModifierMin();
            }
        }

        float value = this.maxDrainModifier.getMinValue();
        final byte delta = this.maxDrainModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxDrainModifierMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxDrainModifierMax() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxDrainModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxDrainModifierMax();
            }
        }

        float value = this.maxDrainModifier.getMaxValue();
        final byte delta = this.maxDrainModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxDrainModifierMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMinFaucetModifier() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minFaucetModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMinFaucetModifier();
            }
        }

        float value = this.minFaucetModifier.getValue();
        final byte delta = this.minFaucetModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinFaucetModifier();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMinFaucetModifierMin() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minFaucetModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMinFaucetModifierMin();
            }
        }

        float value = this.minFaucetModifier.getMinValue();
        final byte delta = this.minFaucetModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinFaucetModifierMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMinFaucetModifierMax() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!minFaucetModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMinFaucetModifierMax();
            }
        }

        float value = this.minFaucetModifier.getMaxValue();
        final byte delta = this.minFaucetModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMinFaucetModifierMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxFaucetModifier() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxFaucetModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxFaucetModifier();
            }
        }

        float value = this.maxFaucetModifier.getValue();
        final byte delta = this.maxFaucetModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxFaucetModifier();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxFaucetModifierMin() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxFaucetModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxFaucetModifierMin();
            }
        }

        float value = this.maxFaucetModifier.getMinValue();
        final byte delta = this.maxFaucetModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxFaucetModifierMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxFaucetModifierMax() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxFaucetModifier.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxFaucetModifierMax();
            }
        }

        float value = this.maxFaucetModifier.getMaxValue();
        final byte delta = this.maxFaucetModifier.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxFaucetModifierMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public AttribMod getAttribMods(int index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!attribModsLoaded) {
            if (base == null) {
                return null;
            } else {
                return base.getAttribMods(index);
            }
        }

        if (attribModsAppend && base != null) {
            int baseCount = base.getAttribModsCount();

            if (index < baseCount) {
                return base.getAttribMods(index);
            }
            index -= baseCount;
        }
        final ObjectTemplate structTemplate = attribMods.get(index).getValue();
        Preconditions.checkNotNull(structTemplate);
        final AttribModObjectTemplate param = (AttribModObjectTemplate) structTemplate;

        final AttribMod data = new AttribMod();
        data.target = param.getTarget();
        data.value = param.getValue();
        data.time = param.getTime();
        data.timeAtValue = param.getTimeAtValue();
        data.decay = param.getDecay();

        return data;
    }

    public AttribMod getAttribModsMin(int index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!attribModsLoaded) {
            if (base == null) {
                return null;
            } else {
                return base.getAttribModsMin(index);
            }
        }

        if (attribModsAppend && base != null) {
            int baseCount = base.getAttribModsCount();

            if (index < baseCount) {
                return base.getAttribModsMin(index);
            }
            index -= baseCount;
        }
        final ObjectTemplate structTemplate = attribMods.get(index).getValue();
        Preconditions.checkNotNull(structTemplate);
        final AttribModObjectTemplate param = (AttribModObjectTemplate) structTemplate;

        final AttribMod data = new AttribMod();
        data.target = param.getTarget();
        data.value = param.getValueMin();
        data.time = param.getTimeMin();
        data.timeAtValue = param.getTimeAtValueMin();
        data.decay = param.getDecayMin();

        return data;
    }

    public AttribMod getAttribModsMax(int index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!attribModsLoaded) {
            if (base == null) {
                return null;
            } else {
                return base.getAttribModsMax(index);
            }
        }

        if (attribModsAppend && base != null) {
            int baseCount = base.getAttribModsCount();

            if (index < baseCount) {
                return base.getAttribModsMax(index);
            }
            index -= baseCount;
        }
        final ObjectTemplate structTemplate = attribMods.get(index).getValue();
        Preconditions.checkNotNull(structTemplate);
        final AttribModObjectTemplate param = (AttribModObjectTemplate) structTemplate;

        final AttribMod data = new AttribMod();
        data.target = param.getTarget();
        data.value = param.getValueMax();
        data.time = param.getTimeMax();
        data.timeAtValue = param.getTimeAtValueMax();
        data.decay = param.getDecayMax();

        return data;
    }

    public int getAttribModsCount() {
        if (!attribModsLoaded) {
            if (baseData == null)
                return 0;

            final ServerCreatureObjectTemplate base = (ServerCreatureObjectTemplate) baseData;
            return base.getAttribModsCount();
        }

        int count = attribMods.size();

        if (attribModsAppend && baseData != null) {
            final ServerCreatureObjectTemplate base = (ServerCreatureObjectTemplate) baseData;
            count += base.getAttribModsCount();
        }

        return count;
    }

    public int getShockWounds() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!shockWounds.isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getShockWounds();
            }
        }

        int value = this.shockWounds.getValue();
        final byte delta = this.shockWounds.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getShockWounds();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getShockWoundsMin() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!shockWounds.isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getShockWoundsMin();
            }
        }

        int value = this.shockWounds.getMinValue();
        final byte delta = this.shockWounds.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getShockWoundsMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getShockWoundsMax() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!shockWounds.isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getShockWoundsMax();
            }
        }

        int value = this.shockWounds.getMaxValue();
        final byte delta = this.shockWounds.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getShockWoundsMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public boolean getCanCreateAvatar() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!canCreateAvatar.isLoaded()) {
            if (base == null) {
                return false;
            } else {
                return base.getCanCreateAvatar();
            }
        }

        boolean value = this.canCreateAvatar.getValue();
        return value;
    }

    public String getNameGeneratorType() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!nameGeneratorType.isLoaded()) {
            if (base == null) {
                return "";
            } else {
                return base.getNameGeneratorType();
            }
        }

        String value = this.nameGeneratorType.getValue();
        return value;
    }

    public float getApproachTriggerRange() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!approachTriggerRange.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getApproachTriggerRange();
            }
        }

        float value = this.approachTriggerRange.getValue();
        final byte delta = this.approachTriggerRange.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getApproachTriggerRange();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getApproachTriggerRangeMin() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!approachTriggerRange.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getApproachTriggerRangeMin();
            }
        }

        float value = this.approachTriggerRange.getMinValue();
        final byte delta = this.approachTriggerRange.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getApproachTriggerRangeMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getApproachTriggerRangeMax() {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!approachTriggerRange.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getApproachTriggerRangeMax();
            }
        }

        float value = this.approachTriggerRange.getMaxValue();
        final byte delta = this.approachTriggerRange.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getApproachTriggerRangeMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxMentalStates(MentalStates index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxMentalStates[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxMentalStates(index);
            }
        }

        float value = this.maxMentalStates[(int) index.value].getValue();
        final byte delta = this.maxMentalStates[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxMentalStates(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxMentalStatesMin(MentalStates index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxMentalStates[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxMentalStatesMin(index);
            }
        }

        float value = this.maxMentalStates[(int) index.value].getMinValue();
        final byte delta = this.maxMentalStates[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxMentalStatesMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxMentalStatesMax(MentalStates index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!maxMentalStates[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxMentalStatesMax(index);
            }
        }

        float value = this.maxMentalStates[(int) index.value].getMaxValue();
        final byte delta = this.maxMentalStates[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxMentalStatesMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMentalStatesDecay(MentalStates index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!mentalStatesDecay[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMentalStatesDecay(index);
            }
        }

        float value = this.mentalStatesDecay[(int) index.value].getValue();
        final byte delta = this.mentalStatesDecay[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMentalStatesDecay(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMentalStatesDecayMin(MentalStates index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!mentalStatesDecay[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMentalStatesDecayMin(index);
            }
        }

        float value = this.mentalStatesDecay[(int) index.value].getMinValue();
        final byte delta = this.mentalStatesDecay[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMentalStatesDecayMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMentalStatesDecayMax(MentalStates index) {
        ServerCreatureObjectTemplate base = null;

        if (baseData instanceof ServerCreatureObjectTemplate)
            base = (ServerCreatureObjectTemplate) baseData;

        if (!mentalStatesDecay[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMentalStatesDecayMax(index);
            }
        }

        float value = this.mentalStatesDecay[(int) index.value].getMaxValue();
        final byte delta = this.mentalStatesDecay[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMentalStatesDecayMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    @Override
    protected void load(final Iff iff) {
        if (iff.getCurrentName() != TAG_SERVERCREATUREOBJECTTEMPLATE) {
            super.load(iff);
            return;
        }

        iff.enterForm();
        templateVersion = iff.getCurrentName();

        if (templateVersion == Tag.TAG_DERV) {
            iff.enterForm();
            iff.enterChunk();
            final String baseFilename = iff.readString();
            iff.exitChunk();
            final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
            Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
            if (baseData == base && base != null) {
                base.releaseReference();
            } else {
                if (baseData != null)
                    baseData.releaseReference();
                baseData = base;
            }
            iff.exitForm();
            templateVersion = iff.getCurrentName();
        }

        iff.enterForm();
        iff.enterChunk();
        final int paramCount = iff.readInt();
        iff.exitChunk();
        for (int i = 0; i < paramCount; ++i) {
            iff.enterChunk();
            final String parameterName = iff.readString();

            if ("defaultWeapon".equalsIgnoreCase(parameterName)) {
                defaultWeapon.loadFromIff(objectTemplateList, iff);
            } else if ("attributes".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 6 && j < listCount; ++j)
                    attributes[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final IntegerParam dummy = new IntegerParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("minAttributes".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 6 && j < listCount; ++j)
                    minAttributes[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final IntegerParam dummy = new IntegerParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("maxAttributes".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 6 && j < listCount; ++j)
                    maxAttributes[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final IntegerParam dummy = new IntegerParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("minDrainModifier".equalsIgnoreCase(parameterName)) {
                minDrainModifier.loadFromIff(objectTemplateList, iff);
            } else if ("maxDrainModifier".equalsIgnoreCase(parameterName)) {
                maxDrainModifier.loadFromIff(objectTemplateList, iff);
            } else if ("minFaucetModifier".equalsIgnoreCase(parameterName)) {
                minFaucetModifier.loadFromIff(objectTemplateList, iff);
            } else if ("maxFaucetModifier".equalsIgnoreCase(parameterName)) {
                maxFaucetModifier.loadFromIff(objectTemplateList, iff);
            } else if ("attribMods".equalsIgnoreCase(parameterName)) {
                attribMods.clear();
                attribModsAppend = iff.readBoolean();
                int listCount = iff.readInt();
                for (int j = 0; j < listCount; ++j) {
                    final StructParam<ObjectTemplate> newData = new StructParam<ObjectTemplate>();
                    newData.loadFromIff(objectTemplateList, iff);
                    attribMods.add(newData);
                }
                attribModsLoaded = true;
            } else if ("shockWounds".equalsIgnoreCase(parameterName)) {
                shockWounds.loadFromIff(objectTemplateList, iff);
            } else if ("canCreateAvatar".equalsIgnoreCase(parameterName)) {
                canCreateAvatar.loadFromIff(objectTemplateList, iff);
            } else if ("nameGeneratorType".equalsIgnoreCase(parameterName)) {
                nameGeneratorType.loadFromIff(objectTemplateList, iff);
            } else if ("approachTriggerRange".equalsIgnoreCase(parameterName)) {
                approachTriggerRange.loadFromIff(objectTemplateList, iff);
            } else if ("maxMentalStates".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 4 && j < listCount; ++j)
                    maxMentalStates[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final FloatParam dummy = new FloatParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("mentalStatesDecay".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 4 && j < listCount; ++j)
                    mentalStatesDecay[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final FloatParam dummy = new FloatParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else {
                LOGGER.trace("Unexpected parameter {}", parameterName);
            }

            iff.exitChunk();
        }
        iff.exitForm();

        super.load(iff);
        iff.exitForm();
    }

    public enum PathNodeType {
        PN_Open(0), //grasslands
        PN_SparseCover(1), //light forests, vaporator farms
        PN_DenseCover(2), //dense forests etc.
        PN_NaturalInterior(3), //caves
        PN_ArtificialInterior(4), //buildings
        PN_NaturalPath(5), //paths and trails
        PN_ArtificialPath(6), //roads
        PN_PassableWater(7), //rivers, ponds, shorelines
        PN_ImpassableWater(8), //big lakes and oceans
        PathNodeType_Last(PN_ImpassableWater.value);

        private static final PathNodeType[] values = values();
        public final long value;

        PathNodeType(final long value) {
            this.value = value;
        }

        public static PathNodeType from(final long value) {
            for (final PathNodeType e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum PathNodeType", value));
        }
    }

}

