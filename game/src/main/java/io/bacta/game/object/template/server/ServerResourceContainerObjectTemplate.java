package io.bacta.game.object.template.server;


import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.template.definition.TemplateDefinition;
import io.bacta.shared.utility.IntegerParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@TemplateDefinition
public class ServerResourceContainerObjectTemplate extends ServerTangibleObjectTemplate {
    private static final Logger LOGGER = LoggerFactory.getLogger(ServerResourceContainerObjectTemplate.class);
    public static final int TAG_SERVERRESOURCECONTAINEROBJECTTEMPLATE = Tag.convertStringToTag("RCNO");

    private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
        objectTemplateList.registerTemplate(ServerResourceContainerObjectTemplate.TAG_SERVERRESOURCECONTAINEROBJECTTEMPLATE, ServerResourceContainerObjectTemplate::new);
    }

    private int templateVersion;

    private final IntegerParam maxResources = new IntegerParam(); //Maximum number of units of resource the container can hold.

    public ServerResourceContainerObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
        super(filename, objectTemplateList);
    }

    @Override
    public int getId() {
        return TAG_SERVERRESOURCECONTAINEROBJECTTEMPLATE;
    }

    public int getMaxResources() {
        ServerResourceContainerObjectTemplate base = null;

        if (baseData instanceof ServerResourceContainerObjectTemplate)
            base = (ServerResourceContainerObjectTemplate) baseData;

        if (!maxResources.isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMaxResources();
            }
        }

        int value = this.maxResources.getValue();
        final byte delta = this.maxResources.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxResources();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMaxResourcesMin() {
        ServerResourceContainerObjectTemplate base = null;

        if (baseData instanceof ServerResourceContainerObjectTemplate)
            base = (ServerResourceContainerObjectTemplate) baseData;

        if (!maxResources.isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMaxResourcesMin();
            }
        }

        int value = this.maxResources.getMinValue();
        final byte delta = this.maxResources.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxResourcesMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public int getMaxResourcesMax() {
        ServerResourceContainerObjectTemplate base = null;

        if (baseData instanceof ServerResourceContainerObjectTemplate)
            base = (ServerResourceContainerObjectTemplate) baseData;

        if (!maxResources.isLoaded()) {
            if (base == null) {
                return 0;
            } else {
                return base.getMaxResourcesMax();
            }
        }

        int value = this.maxResources.getMaxValue();
        final byte delta = this.maxResources.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            int baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxResourcesMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (int) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (int) (baseValue * (value / 100.0f));
        }
        return value;
    }

    @Override
    protected void load(final Iff iff) {
        if (iff.getCurrentName() != TAG_SERVERRESOURCECONTAINEROBJECTTEMPLATE) {
            super.load(iff);
            return;
        }

        iff.enterForm();
        templateVersion = iff.getCurrentName();

        if (templateVersion == Tag.TAG_DERV) {
            iff.enterForm();
            iff.enterChunk();
            final String baseFilename = iff.readString();
            iff.exitChunk();
            final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
            Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
            if (baseData == base && base != null) {
                base.releaseReference();
            } else {
                if (baseData != null)
                    baseData.releaseReference();
                baseData = base;
            }
            iff.exitForm();
            templateVersion = iff.getCurrentName();
        }

        iff.enterForm();
        iff.enterChunk();
        final int paramCount = iff.readInt();
        iff.exitChunk();
        for (int i = 0; i < paramCount; ++i) {
            iff.enterChunk();
            final String parameterName = iff.readString();

            if ("maxResources".equalsIgnoreCase(parameterName)) {
                maxResources.loadFromIff(objectTemplateList, iff);
            } else {
                LOGGER.trace("Unexpected parameter {}", parameterName);
            }

            iff.exitChunk();
        }
        iff.exitForm();

        super.load(iff);
        iff.exitForm();
    }

}

