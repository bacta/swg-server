package io.bacta.shared.object.template;

import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.utility.IntegerParam;
import io.bacta.shared.utility.StringParam;
import io.bacta.template.definition.TemplateDefinition;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@Slf4j
@TemplateDefinition
public class SharedWeaponObjectTemplate extends SharedTangibleObjectTemplate {
	public static final int TAG_SHAREDWEAPONOBJECTTEMPLATE = Tag.convertStringToTag("SWOT");

	private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
		objectTemplateList.registerTemplate(SharedWeaponObjectTemplate.TAG_SHAREDWEAPONOBJECTTEMPLATE, SharedWeaponObjectTemplate::new);
	}

	private int templateVersion;

	private final StringParam weaponEffect = new StringParam(); //The id lookup into the weapon data table for the bolt and combat effects.
	private final IntegerParam weaponEffectIndex = new IntegerParam(); //The index 0-4 for a specific weaponEffect in the weapon data table.
	private final IntegerParam attackType = new IntegerParam(); //Type of attack this weapon is used with.

	public SharedWeaponObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
		super(filename, objectTemplateList);
	}

	@Override
	public int getId() { return TAG_SHAREDWEAPONOBJECTTEMPLATE; }

	public String getWeaponEffect() {
		SharedWeaponObjectTemplate base = null;

		if (baseData instanceof SharedWeaponObjectTemplate)
			base = (SharedWeaponObjectTemplate)baseData;

		if (!weaponEffect.isLoaded()) {
			if (base == null) {
				return "";
			} else {
				return base.getWeaponEffect();
			}
		}

		String value = this.weaponEffect.getValue();
		return value;
	}

	public int getWeaponEffectIndex() {
		SharedWeaponObjectTemplate base = null;

		if (baseData instanceof SharedWeaponObjectTemplate)
			base = (SharedWeaponObjectTemplate)baseData;

		if (!weaponEffectIndex.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getWeaponEffectIndex();
			}
		}

		int value = this.weaponEffectIndex.getValue();
		final byte delta = this.weaponEffectIndex.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getWeaponEffectIndex();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getWeaponEffectIndexMin() {
		SharedWeaponObjectTemplate base = null;

		if (baseData instanceof SharedWeaponObjectTemplate)
			base = (SharedWeaponObjectTemplate)baseData;

		if (!weaponEffectIndex.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getWeaponEffectIndexMin();
			}
		}

		int value = this.weaponEffectIndex.getMinValue();
		final byte delta = this.weaponEffectIndex.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getWeaponEffectIndexMin();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public int getWeaponEffectIndexMax() {
		SharedWeaponObjectTemplate base = null;

		if (baseData instanceof SharedWeaponObjectTemplate)
			base = (SharedWeaponObjectTemplate)baseData;

		if (!weaponEffectIndex.isLoaded()) {
			if (base == null) {
				return 0;
			} else {
				return base.getWeaponEffectIndexMax();
			}
		}

		int value = this.weaponEffectIndex.getMaxValue();
		final byte delta = this.weaponEffectIndex.getDeltaType();

		if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
			int baseValue = 0;

				if (baseData != null) {
					if (base != null)
						baseValue = base.getWeaponEffectIndexMax();
				}

			if (delta == '+')
				value = baseValue + value;
			if (delta == '-')
				value = baseValue - value;
			if (delta == '=')
				value = baseValue + (int)(baseValue * (value / 100.0f));
			if (delta == '_')
				value = baseValue - (int)(baseValue * (value / 100.0f));
		}
		return value;
	}

	public AttackType getAttackType() {
		SharedWeaponObjectTemplate base = null;

		if (baseData instanceof SharedWeaponObjectTemplate)
			base = (SharedWeaponObjectTemplate)baseData;

		if (!attackType.isLoaded()) {
			if (base == null) {
				return AttackType.from(0);
			} else {
				return base.getAttackType();
			}
		}

		return AttackType.from(attackType.getValue());
	}

	@Override
	protected void load(final Iff iff) {
		if (iff.getCurrentName() != TAG_SHAREDWEAPONOBJECTTEMPLATE) {
			super.load(iff);
			return;
		}

		iff.enterForm();
		templateVersion = iff.getCurrentName();

		if (templateVersion == Tag.TAG_DERV) {
			iff.enterForm();
			iff.enterChunk();
			final String baseFilename = iff.readString();
			iff.exitChunk();
			final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
			Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
			if (baseData == base && base != null) {
				base.releaseReference();
			} else {
				if (baseData != null)
					baseData.releaseReference();
				baseData = base;
			}
			iff.exitForm();
			templateVersion = iff.getCurrentName();
		}

		iff.enterForm();
		iff.enterChunk();
		final int paramCount = iff.readInt();
		iff.exitChunk();
		for (int i = 0; i < paramCount; ++i) {
			iff.enterChunk();
			final String parameterName = iff.readString();

			if ("weaponEffect".equalsIgnoreCase(parameterName)) {
				weaponEffect.loadFromIff(objectTemplateList, iff);
			} else if ("weaponEffectIndex".equalsIgnoreCase(parameterName)) {
				weaponEffectIndex.loadFromIff(objectTemplateList, iff);
			} else if ("attackType".equalsIgnoreCase(parameterName)) {
				attackType.loadFromIff(objectTemplateList, iff);
			} else  {
				LOGGER.trace("Unexpected parameter {}", parameterName);
			}

			iff.exitChunk();
		}
		iff.exitForm();

		super.load(iff);
		iff.exitForm();
	}

	public enum AttackType {
		AT_melee(0), 
		AT_ranged(1), 
		AT_thrown(2), 
		AT_ammo(3), 
		AttackType_Last(AT_ammo.value);

		private static final AttackType[] values = values();
		public final long value;
		AttackType(final long value) { this.value = value; }
		public static AttackType from(final long value) {
			for (final AttackType e : values)
				if (e.value == value) return e;
			throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum AttackType", value));
		}
	}

}

