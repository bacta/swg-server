package io.bacta.shared.object.template;

import com.google.common.base.Preconditions;
import io.bacta.shared.foundation.DataResourceList;
import io.bacta.shared.foundation.Tag;
import io.bacta.shared.iff.Iff;
import io.bacta.shared.template.ObjectTemplate;
import io.bacta.shared.template.definition.TemplateDefinition;
import io.bacta.shared.utility.BoolParam;
import io.bacta.shared.utility.FloatParam;
import io.bacta.shared.utility.IntegerParam;
import io.bacta.shared.utility.StringParam;
import lombok.extern.slf4j.Slf4j;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
@Slf4j
@TemplateDefinition
public class SharedCreatureObjectTemplate extends SharedTangibleObjectTemplate {
    public static final int TAG_SHAREDCREATUREOBJECTTEMPLATE = Tag.convertStringToTag("SCOT");

    private static void registerTemplateConstructors(final DataResourceList<ObjectTemplate> objectTemplateList) {
        objectTemplateList.registerTemplate(SharedCreatureObjectTemplate.TAG_SHAREDCREATUREOBJECTTEMPLATE, SharedCreatureObjectTemplate::new);
    }

    private int templateVersion;

    private final IntegerParam gender = new IntegerParam(); //creature gender
    private final IntegerParam niche = new IntegerParam(); //creature niche
    private final IntegerParam species = new IntegerParam(); //creature species
    private final IntegerParam race = new IntegerParam(); //creature subspecies
    private final FloatParam[] acceleration = new FloatParam[]{ //how fast the creature accelerates in m/s/s
            new FloatParam(),
            new FloatParam(),
    };
    private final FloatParam[] speed = new FloatParam[]{ //how fast the creature moves in m/s
            new FloatParam(),
            new FloatParam(),
    };
    private final FloatParam[] turnRate = new FloatParam[]{ //how fast the creature turns in deg/s
            new FloatParam(),
            new FloatParam(),
    };
    private final StringParam animationMapFilename = new StringParam(); //info on how to animate the creature
    private final FloatParam slopeModAngle = new FloatParam(); //the maximum slope (in degrees) the creature will scale
    private final FloatParam slopeModPercent = new FloatParam(); //the relative speed the creature travels up a vertical slope
    private final FloatParam waterModPercent = new FloatParam(); //the relative speed the creature travels in water
    private final FloatParam stepHeight = new FloatParam(); //The maximum vertical step distance for the creature
    private final FloatParam collisionHeight = new FloatParam(); //The height of the creature's collision cylinder
    private final FloatParam collisionRadius = new FloatParam(); //The radius of the creature's collision cylinder
    private final StringParam movementDatatable = new StringParam(); //The datatable to use for creature movement
    private final BoolParam[] postureAlignToTerrain = new BoolParam[]{ //align to terrain flags per posture
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
            new BoolParam(),
    };
    private final FloatParam swimHeight = new FloatParam(); //Height below the water where the creature decides to swim
    private final FloatParam warpTolerance = new FloatParam();
    private final FloatParam collisionOffsetX = new FloatParam(); // X offset of the collision sphere
    private final FloatParam collisionOffsetZ = new FloatParam(); // Z offset of the collision sphere
    private final FloatParam collisionLength = new FloatParam(); // Length of the creature, in meters
    private final FloatParam cameraHeight = new FloatParam();

    public SharedCreatureObjectTemplate(final String filename, final DataResourceList<ObjectTemplate> objectTemplateList) {
        super(filename, objectTemplateList);
    }

    @Override
    public int getId() {
        return TAG_SHAREDCREATUREOBJECTTEMPLATE;
    }

    public Gender getGender() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!gender.isLoaded()) {
            if (base == null) {
                return Gender.from(0);
            } else {
                return base.getGender();
            }
        }

        return Gender.from(gender.getValue());
    }

    public Niche getNiche() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!niche.isLoaded()) {
            if (base == null) {
                return Niche.from(0);
            } else {
                return base.getNiche();
            }
        }

        return Niche.from(niche.getValue());
    }

    public Species getSpecies() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!species.isLoaded()) {
            if (base == null) {
                return Species.from(0);
            } else {
                return base.getSpecies();
            }
        }

        return Species.from(species.getValue());
    }

    public Race getRace() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!race.isLoaded()) {
            if (base == null) {
                return Race.from(0);
            } else {
                return base.getRace();
            }
        }

        return Race.from(race.getValue());
    }

    public float getAcceleration(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!acceleration[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getAcceleration(index);
            }
        }

        float value = this.acceleration[(int) index.value].getValue();
        final byte delta = this.acceleration[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAcceleration(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getAccelerationMin(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!acceleration[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getAccelerationMin(index);
            }
        }

        float value = this.acceleration[(int) index.value].getMinValue();
        final byte delta = this.acceleration[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAccelerationMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getAccelerationMax(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!acceleration[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getAccelerationMax(index);
            }
        }

        float value = this.acceleration[(int) index.value].getMaxValue();
        final byte delta = this.acceleration[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAccelerationMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSpeed(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!speed[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSpeed(index);
            }
        }

        float value = this.speed[(int) index.value].getValue();
        final byte delta = this.speed[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSpeed(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSpeedMin(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!speed[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSpeedMin(index);
            }
        }

        float value = this.speed[(int) index.value].getMinValue();
        final byte delta = this.speed[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSpeedMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSpeedMax(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!speed[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSpeedMax(index);
            }
        }

        float value = this.speed[(int) index.value].getMaxValue();
        final byte delta = this.speed[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSpeedMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getTurnRate(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!turnRate[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getTurnRate(index);
            }
        }

        float value = this.turnRate[(int) index.value].getValue();
        final byte delta = this.turnRate[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getTurnRate(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getTurnRateMin(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!turnRate[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getTurnRateMin(index);
            }
        }

        float value = this.turnRate[(int) index.value].getMinValue();
        final byte delta = this.turnRate[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getTurnRateMin(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getTurnRateMax(MovementTypes index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!turnRate[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getTurnRateMax(index);
            }
        }

        float value = this.turnRate[(int) index.value].getMaxValue();
        final byte delta = this.turnRate[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getTurnRateMax(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public String getAnimationMapFilename() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!animationMapFilename.isLoaded()) {
            if (base == null) {
                return null;
            } else {
                return base.getAnimationMapFilename();
            }
        }

        String value = this.animationMapFilename.getValue();
        return value;
    }

    public float getSlopeModAngle() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!slopeModAngle.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeModAngle();
            }
        }

        float value = this.slopeModAngle.getValue();
        final byte delta = this.slopeModAngle.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeModAngle();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSlopeModAngleMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!slopeModAngle.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeModAngleMin();
            }
        }

        float value = this.slopeModAngle.getMinValue();
        final byte delta = this.slopeModAngle.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeModAngleMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSlopeModAngleMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!slopeModAngle.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeModAngleMax();
            }
        }

        float value = this.slopeModAngle.getMaxValue();
        final byte delta = this.slopeModAngle.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeModAngleMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSlopeModPercent() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!slopeModPercent.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeModPercent();
            }
        }

        float value = this.slopeModPercent.getValue();
        final byte delta = this.slopeModPercent.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeModPercent();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSlopeModPercentMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!slopeModPercent.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeModPercentMin();
            }
        }

        float value = this.slopeModPercent.getMinValue();
        final byte delta = this.slopeModPercent.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeModPercentMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSlopeModPercentMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!slopeModPercent.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeModPercentMax();
            }
        }

        float value = this.slopeModPercent.getMaxValue();
        final byte delta = this.slopeModPercent.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeModPercentMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getWaterModPercent() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!waterModPercent.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getWaterModPercent();
            }
        }

        float value = this.waterModPercent.getValue();
        final byte delta = this.waterModPercent.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getWaterModPercent();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getWaterModPercentMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!waterModPercent.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getWaterModPercentMin();
            }
        }

        float value = this.waterModPercent.getMinValue();
        final byte delta = this.waterModPercent.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getWaterModPercentMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getWaterModPercentMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!waterModPercent.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getWaterModPercentMax();
            }
        }

        float value = this.waterModPercent.getMaxValue();
        final byte delta = this.waterModPercent.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getWaterModPercentMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getStepHeight() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!stepHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getStepHeight();
            }
        }

        float value = this.stepHeight.getValue();
        final byte delta = this.stepHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getStepHeight();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getStepHeightMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!stepHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getStepHeightMin();
            }
        }

        float value = this.stepHeight.getMinValue();
        final byte delta = this.stepHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getStepHeightMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getStepHeightMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!stepHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getStepHeightMax();
            }
        }

        float value = this.stepHeight.getMaxValue();
        final byte delta = this.stepHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getStepHeightMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionHeight() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionHeight();
            }
        }

        float value = this.collisionHeight.getValue();
        final byte delta = this.collisionHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionHeight();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionHeightMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionHeightMin();
            }
        }

        float value = this.collisionHeight.getMinValue();
        final byte delta = this.collisionHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionHeightMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionHeightMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionHeightMax();
            }
        }

        float value = this.collisionHeight.getMaxValue();
        final byte delta = this.collisionHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionHeightMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionRadius() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionRadius.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionRadius();
            }
        }

        float value = this.collisionRadius.getValue();
        final byte delta = this.collisionRadius.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionRadius();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionRadiusMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionRadius.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionRadiusMin();
            }
        }

        float value = this.collisionRadius.getMinValue();
        final byte delta = this.collisionRadius.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionRadiusMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionRadiusMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionRadius.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionRadiusMax();
            }
        }

        float value = this.collisionRadius.getMaxValue();
        final byte delta = this.collisionRadius.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionRadiusMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public String getMovementDatatable() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!movementDatatable.isLoaded()) {
            if (base == null) {
                return "";
            } else {
                return base.getMovementDatatable();
            }
        }

        String value = this.movementDatatable.getValue();
        return value;
    }

    public boolean getPostureAlignToTerrain(Postures index) {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!postureAlignToTerrain[(int) index.value].isLoaded()) {
            if (base == null) {
                return false;
            } else {
                return base.getPostureAlignToTerrain(index);
            }
        }

        boolean value = this.postureAlignToTerrain[(int) index.value].getValue();
        return value;
    }

    public float getSwimHeight() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!swimHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSwimHeight();
            }
        }

        float value = this.swimHeight.getValue();
        final byte delta = this.swimHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSwimHeight();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSwimHeightMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!swimHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSwimHeightMin();
            }
        }

        float value = this.swimHeight.getMinValue();
        final byte delta = this.swimHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSwimHeightMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSwimHeightMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!swimHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSwimHeightMax();
            }
        }

        float value = this.swimHeight.getMaxValue();
        final byte delta = this.swimHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSwimHeightMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getWarpTolerance() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!warpTolerance.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getWarpTolerance();
            }
        }

        float value = this.warpTolerance.getValue();
        final byte delta = this.warpTolerance.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getWarpTolerance();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getWarpToleranceMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!warpTolerance.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getWarpToleranceMin();
            }
        }

        float value = this.warpTolerance.getMinValue();
        final byte delta = this.warpTolerance.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getWarpToleranceMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getWarpToleranceMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!warpTolerance.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getWarpToleranceMax();
            }
        }

        float value = this.warpTolerance.getMaxValue();
        final byte delta = this.warpTolerance.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getWarpToleranceMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionOffsetX() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionOffsetX.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionOffsetX();
            }
        }

        float value = this.collisionOffsetX.getValue();
        final byte delta = this.collisionOffsetX.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionOffsetX();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionOffsetXMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionOffsetX.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionOffsetXMin();
            }
        }

        float value = this.collisionOffsetX.getMinValue();
        final byte delta = this.collisionOffsetX.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionOffsetXMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionOffsetXMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionOffsetX.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionOffsetXMax();
            }
        }

        float value = this.collisionOffsetX.getMaxValue();
        final byte delta = this.collisionOffsetX.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionOffsetXMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionOffsetZ() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionOffsetZ.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionOffsetZ();
            }
        }

        float value = this.collisionOffsetZ.getValue();
        final byte delta = this.collisionOffsetZ.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionOffsetZ();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionOffsetZMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionOffsetZ.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionOffsetZMin();
            }
        }

        float value = this.collisionOffsetZ.getMinValue();
        final byte delta = this.collisionOffsetZ.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionOffsetZMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionOffsetZMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionOffsetZ.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionOffsetZMax();
            }
        }

        float value = this.collisionOffsetZ.getMaxValue();
        final byte delta = this.collisionOffsetZ.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionOffsetZMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionLength() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionLength.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionLength();
            }
        }

        float value = this.collisionLength.getValue();
        final byte delta = this.collisionLength.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionLength();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionLengthMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionLength.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionLengthMin();
            }
        }

        float value = this.collisionLength.getMinValue();
        final byte delta = this.collisionLength.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionLengthMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCollisionLengthMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!collisionLength.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCollisionLengthMax();
            }
        }

        float value = this.collisionLength.getMaxValue();
        final byte delta = this.collisionLength.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCollisionLengthMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCameraHeight() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!cameraHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCameraHeight();
            }
        }

        float value = this.cameraHeight.getValue();
        final byte delta = this.cameraHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCameraHeight();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCameraHeightMin() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!cameraHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCameraHeightMin();
            }
        }

        float value = this.cameraHeight.getMinValue();
        final byte delta = this.cameraHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCameraHeightMin();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getCameraHeightMax() {
        SharedCreatureObjectTemplate base = null;

        if (baseData instanceof SharedCreatureObjectTemplate)
            base = (SharedCreatureObjectTemplate) baseData;

        if (!cameraHeight.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getCameraHeightMax();
            }
        }

        float value = this.cameraHeight.getMaxValue();
        final byte delta = this.cameraHeight.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getCameraHeightMax();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    @Override
    protected void load(final Iff iff) {
        if (iff.getCurrentName() != TAG_SHAREDCREATUREOBJECTTEMPLATE) {
            super.load(iff);
            return;
        }

        iff.enterForm();
        templateVersion = iff.getCurrentName();

        if (templateVersion == Tag.TAG_DERV) {
            iff.enterForm();
            iff.enterChunk();
            final String baseFilename = iff.readString();
            iff.exitChunk();
            final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
            Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
            if (baseData == base && base != null) {
                base.releaseReference();
            } else {
                if (baseData != null)
                    baseData.releaseReference();
                baseData = base;
            }
            iff.exitForm();
            templateVersion = iff.getCurrentName();
        }

        iff.enterForm();
        iff.enterChunk();
        final int paramCount = iff.readInt();
        iff.exitChunk();
        for (int i = 0; i < paramCount; ++i) {
            iff.enterChunk();
            final String parameterName = iff.readString();

            if ("gender".equalsIgnoreCase(parameterName)) {
                gender.loadFromIff(objectTemplateList, iff);
            } else if ("niche".equalsIgnoreCase(parameterName)) {
                niche.loadFromIff(objectTemplateList, iff);
            } else if ("species".equalsIgnoreCase(parameterName)) {
                species.loadFromIff(objectTemplateList, iff);
            } else if ("race".equalsIgnoreCase(parameterName)) {
                race.loadFromIff(objectTemplateList, iff);
            } else if ("acceleration".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 2 && j < listCount; ++j)
                    acceleration[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final FloatParam dummy = new FloatParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("speed".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 2 && j < listCount; ++j)
                    speed[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final FloatParam dummy = new FloatParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("turnRate".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 2 && j < listCount; ++j)
                    turnRate[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final FloatParam dummy = new FloatParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("animationMapFilename".equalsIgnoreCase(parameterName)) {
                animationMapFilename.loadFromIff(objectTemplateList, iff);
            } else if ("slopeModAngle".equalsIgnoreCase(parameterName)) {
                slopeModAngle.loadFromIff(objectTemplateList, iff);
            } else if ("slopeModPercent".equalsIgnoreCase(parameterName)) {
                slopeModPercent.loadFromIff(objectTemplateList, iff);
            } else if ("waterModPercent".equalsIgnoreCase(parameterName)) {
                waterModPercent.loadFromIff(objectTemplateList, iff);
            } else if ("stepHeight".equalsIgnoreCase(parameterName)) {
                stepHeight.loadFromIff(objectTemplateList, iff);
            } else if ("collisionHeight".equalsIgnoreCase(parameterName)) {
                collisionHeight.loadFromIff(objectTemplateList, iff);
            } else if ("collisionRadius".equalsIgnoreCase(parameterName)) {
                collisionRadius.loadFromIff(objectTemplateList, iff);
            } else if ("movementDatatable".equalsIgnoreCase(parameterName)) {
                movementDatatable.loadFromIff(objectTemplateList, iff);
            } else if ("postureAlignToTerrain".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 15 && j < listCount; ++j)
                    postureAlignToTerrain[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final BoolParam dummy = new BoolParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("swimHeight".equalsIgnoreCase(parameterName)) {
                swimHeight.loadFromIff(objectTemplateList, iff);
            } else if ("warpTolerance".equalsIgnoreCase(parameterName)) {
                warpTolerance.loadFromIff(objectTemplateList, iff);
            } else if ("collisionOffsetX".equalsIgnoreCase(parameterName)) {
                collisionOffsetX.loadFromIff(objectTemplateList, iff);
            } else if ("collisionOffsetZ".equalsIgnoreCase(parameterName)) {
                collisionOffsetZ.loadFromIff(objectTemplateList, iff);
            } else if ("collisionLength".equalsIgnoreCase(parameterName)) {
                collisionLength.loadFromIff(objectTemplateList, iff);
            } else if ("cameraHeight".equalsIgnoreCase(parameterName)) {
                cameraHeight.loadFromIff(objectTemplateList, iff);
            } else {
                LOGGER.trace("Unexpected parameter {}", parameterName);
            }

            iff.exitChunk();
        }
        iff.exitForm();

        super.load(iff);
        iff.exitForm();
    }

    public enum Postures {
        Upright(0),
        Crouched(1),
        Prone(2),
        Sneaking(3),
        Blocking(4),
        Climbing(5),
        Flying(6),
        LyingDown(7),
        Sitting(8),
        SkillAnimating(9),
        DrivingVehicle(10),
        RidingCreature(11),
        KnockedDown(12),
        Incapacitated(13),
        Dead(14),
        Postures_Last(Dead.value);

        private static final Postures[] values = values();
        public final long value;

        Postures(final long value) {
            this.value = value;
        }

        public static Postures from(final long value) {
            for (final Postures e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum Postures", value));
        }
    }

    public enum Race {
        RA_none(0),
        RA_aqualish_quara(1),
        RA_aqualish_aquala(2),
        RA_ewok_ewok(1), // plae, green, black, white (subject to change, pending information request to LucasArts)
        RA_ewok_dulok(2), // blue skin; "Orn Free Taa", "Ann Gella" & "Tann", Sebulba's personal entourage.
        RA_ewok_jinda(3), // red skin; "Pampy" & "Supi", consorts of Orn Free Taa.
        RA_gungan_ankura(1), // Boss Nass
        RA_gungan_otolla(2), // Jar Jar
        RA_nikto_red(1), // Kajain'sa'Nikto
        RA_nikto_green(2), // Kadas'sa'Nikto
        RA_nikto_mountain(3), // Esral'sa'Nikto
        RA_nikto_pale(4), // Gluss'sa'Nikto
        RA_nikto_southern(5), // M'shento'su'Nikto
        RA_krayt_canyon(1),
        RA_krayt_greater(2),
        RA_R2(0),
        RA_R3(1),
        RA_R4(2),
        RA_R5(3),
        Race_Last(RA_R5.value);

        private static final Race[] values = values();
        public final long value;

        Race(final long value) {
            this.value = value;
        }

        public static Race from(final long value) {
            for (final Race e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum Race", value));
        }
    }

    public enum Niche {
        NI_none(0),
        NI_pc(1),
        NI_ai(2),
        NI_droid(3),
        NI_vehicle(4),
        NI_npc(5),
        NI_monster(6),
        NI_herbivore(7),
        NI_carnivore(8),
        NI_predator(9),
        NI_android(10),
        Niche_Last(NI_android.value);

        private static final Niche[] values = values();
        public final long value;

        Niche(final long value) {
            this.value = value;
        }

        public static Niche from(final long value) {
            for (final Niche e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum Niche", value));
        }
    }

    public enum Gender {
        GE_male(0),
        GE_female(1),
        GE_other(2),
        Gender_Last(GE_other.value);

        private static final Gender[] values = values();
        public final long value;

        Gender(final long value) {
            this.value = value;
        }

        public static Gender from(final long value) {
            for (final Gender e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum Gender", value));
        }
    }

    public enum Species {
        SP_human(0),
        SP_rodian(1),
        SP_trandoshan(2),
        SP_monCalamari(3),
        SP_wookiee(4),
        SP_bothan(5),
        SP_twilek(6),
        SP_zabrak(7),
        SP_abyssin(8),
        SP_aqualish(9),
        SP_arcona(10),
        SP_askajian(11),
        SP_bith(12),
        SP_bomarrMonk(13),
        SP_chadraFan(14),
        SP_chevin(15),
        SP_dantari(16),
        SP_devaronian(17),
        SP_drall(18),
        SP_dug(19),
        SP_duros(20),
        SP_elomin(21),
        SP_ewok(22),
        SP_feeorin(23),
        SP_frogDog(24),
        SP_gamorrean(25),
        SP_gorax(26),
        SP_gotal(27),
        SP_gran(28),
        SP_gungan(29),
        SP_gupin(30),
        SP_hutt(31),
        SP_ishiTib(32),
        SP_ithorian(33),
        SP_jawa(34),
        SP_kiffu(35),
        SP_kitonak(36),
        SP_klatooinian(37),
        SP_kowakianMonkeyLizard(38),
        SP_kubaz(39),
        SP_marauder(40),
        SP_massassiWarrior(41),
        SP_nikto(42),
        SP_ortolan(43),
        SP_palowick(44),
        SP_phlog(45),
        SP_quarren(46),
        SP_selonian(47),
        SP_shistavanen(48),
        SP_sullustan(49),
        SP_talz(50),
        SP_teek(51),
        SP_tulgah(52),
        SP_toydarian(53),
        SP_tuskenRaider(54),
        SP_weequay(55),
        SP_whiffid(56),
        SP_wistie(57),
        SP_yuzzum(58),
        SP_angler(60),
        SP_bageraset(61),
        SP_bantha(62),
        SP_barkMite(63),
        SP_bazNitch(64),
        SP_beardedJax(65),
        SP_blackfish(66),
        SP_blistmok(67),
        SP_bluefish(68),
        SP_blurrg(69),
        SP_boarWolf(70),
        SP_bocatt(71),
        SP_bol(72),
        SP_bolleBol(73),
        SP_bolma(74),
        SP_bordok(75),
        SP_borgle(76),
        SP_brackaset(77),
        SP_capperSpineflap(78),
        SP_carrionSpat(79),
        SP_choku(80),
        SP_chuba(81),
        SP_coloClawFish(82),
        SP_condorDragon(83),
        SP_corellianSandPanther(84),
        SP_corellianSliceHound(85),
        SP_crownedRasp(86),
        SP_crystalSnake(87),
        SP_cuPa(88),
        SP_dalyrake(89),
        SP_dewback(90),
        SP_duneLizard(91),
        SP_durni(92),
        SP_dwarfNuna(93),
        SP_eopie(94),
        SP_faa(95),
        SP_falumpaset(96),
        SP_fambaa(97),
        SP_fannedRawl(98),
        SP_flewt(99),
        SP_flit(100),
        SP_fliteRasp(101),
        SP_fynock(102),
        SP_gackleBat(103),
        SP_gapingSpider(104),
        SP_gekk(105),
        SP_gnort(106),
        SP_graul(107),
        SP_greatGrassPlainsTuskCat(108),
        SP_gronda(109),
        SP_gualama(110),
        SP_gubbur(111),
        SP_gufDrolg(112),
        SP_gulginaw(113),
        SP_gurk(114),
        SP_gurnaset(115),
        SP_gurrek(116),
        SP_hanadak(117),
        SP_hermitSpider(118),
        SP_hornedKrevol(119),
        SP_hornedRasp(120),
        SP_hufDun(121),
        SP_huurton(122),
        SP_ikopi(123),
        SP_jellyfish(124),
        SP_kaadu(125),
        SP_kaitok(126),
        SP_kima(127),
        SP_kimogila(128),
        SP_kittle(129),
        SP_kliknik(130),
        SP_krahbu(131),
        SP_kraytDragon(132),
        SP_kupernug(133),
        SP_kusak(134),
        SP_kwi(135),
        SP_laa(136),
        SP_langlatch(137),
        SP_lanternBird(138),
        SP_malkloc(139),
        SP_mamien(140),
        SP_mawgax(141),
        SP_merek(142),
        SP_mott(143),
        SP_murra(144),
        SP_mynock(145),
        SP_narglatch(146),
        SP_nerf(147),
        SP_nuna(148),
        SP_opeeSeaKiller(149),
        SP_predatorialButterfly(150),
        SP_pekoPeko(151),
        SP_perlek(152),
        SP_pharple(153),
        SP_piket(154),
        SP_plumedRasp(155),
        SP_pufferfish(156),
        SP_pugoriss(157),
        SP_purbole(158),
        SP_quenker(159),
        SP_qurvel(160),
        SP_rancor(161),
        SP_ray(162),
        SP_remmer(163),
        SP_reptilianFlyer(164),
        SP_roba(165),
        SP_rockMite(166),
        SP_ronto(167),
        SP_saltMynock(168),
        SP_sarlacc(169),
        SP_scurrier(170),
        SP_sharnaff(171),
        SP_shaupaut(172),
        SP_shearMite(173),
        SP_skreeg(174),
        SP_snorbal(175),
        SP_spinedPuc(176),
        SP_spinedSnake(177),
        SP_squall(178),
        SP_squill(179),
        SP_stintaril(180),
        SP_stripedFish(181),
        SP_swirlProng(182),
        SP_tancMite(183),
        SP_taunTaun(184),
        SP_tesselatedArborealBinjinphant(185),
        SP_thune(186),
        SP_torton(187),
        SP_tybis(188),
        SP_veermok(189),
        SP_verne(190),
        SP_vesp(191),
        SP_virVur(192),
        SP_vlutore(193),
        SP_vogEel(194),
        SP_voritorLizard(195),
        SP_vynock(196),
        SP_whisperBird(197),
        SP_wingedOrnith(198),
        SP_wompRat(199),
        SP_woolamander(200),
        SP_worrt(201),
        SP_zuccaBoar(202),
        SP_assassinDroid(203),
        SP_astromech(204),
        SP_bartenderDroid(205),
        SP_bugDroid(206),
        SP_darktrooper(207),
        SP_demolitionmech(208),
        SP_doorDroid(209),
        SP_droideka(210),
        SP_interrogator(211),
        SP_jediTrainer(212),
        SP_loadLifter(213),
        SP_mouseDroid(214),
        SP_powerDroid(215),
        SP_probot(216),
        SP_protocolDroid(217),
        SP_repairDroid(218),
        SP_spiderDroid(219),
        SP_surgicalDroid(220),
        SP_tattletaleDroid(221),
        SP_trackerDroid(222),
        SP_treadwell(223),
        SP_ev9d9(224),
        SP_maulProbeDroid(225),
        SP_atst(226),
        SP_atat(227),
        SP_geonosian(228),
        SP_veractyle(229),
        Species_Last(SP_veractyle.value);

        private static final Species[] values = values();
        public final long value;

        Species(final long value) {
            this.value = value;
        }

        public static Species from(final long value) {
            for (final Species e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum Species", value));
        }
    }

    public enum MovementTypes {
        MT_run(0),
        MT_walk(1),
        MovementTypes_Last(MT_walk.value);

        private static final MovementTypes[] values = values();
        public final long value;

        MovementTypes(final long value) {
            this.value = value;
        }

        public static MovementTypes from(final long value) {
            for (final MovementTypes e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("UNKNOWN value %d for enum MovementTypes", value));
        }
    }

}

