package com.ocdsoft.bacta.swg.precu.object.archive.delta.map;

import com.ocdsoft.bacta.engine.buffer.ByteBufferWritable;
import com.ocdsoft.bacta.engine.utils.BufferUtil;
import com.ocdsoft.bacta.swg.precu.object.archive.delta.AutoDeltaContainer;
#if (${trove})
import gnu.trove.iterator.${iteratorType};
import gnu.trove.map.${mapType};
import gnu.trove.map.hash.${mapImpl};
#end

import java.nio.ByteBuffer;
import java.util.*;
#if(${keyCreator} || ${valueCreator})
import java.util.function.Function;
#end

public class AutoDelta${keyName}${valueName}Map${genericClass} extends AutoDeltaContainer {
        private transient final List<Command$!{genericCommand}> changes;
        private final ${mapType}$!{generic} container;
        private transient int baselineCommandCount;
#if (${keyCreator})
        private final ${keyCreator};
#end
#if (${valueCreator})
        private final ${valueCreator};
#end

    public AutoDelta${keyName}${valueName}Map($!{keyCreator}#if(${keyCreator} && ${valueCreator}),#end$!{valueCreator}) {
        this.changes = new ArrayList<>(5);
        this.container = new ${mapImpl}#if(${generic})<>#end();
        this.baselineCommandCount = 0;
    #if (${keyCreator})
        this.keyCreator = keyCreator;
    #end
    #if (${valueCreator})
        this.valueCreator = valueCreator;
    #end
    }

    public void clear() {
        ${containerForEachStart}
            erase(key${keyToBoolean});
        ${containerForEachEnd}
    }

    @Override
    public void clearDelta() {
        changes.clear();
    }

    public void erase(final ${keyType} key) {
        final ${valueType} value = container.get(key${keyFromBoolean})${valueToBoolean};
    #if(${nullable})
        if (value != null) {
    #end
            final Command$!{genericCommand} command = new Command#if(${genericCommand})<>#end(Command.ERASE, key, value);
            changes.add(command);
            ++baselineCommandCount;
            container.remove(key${keyFromBoolean});
            touch();
            onErase(key, value);
    #if(${nullable})
        }
    #end
    }

    public boolean isEmpty() {
        return container.isEmpty();
    }

    public ${iteratorType}$!{iteratorGeneric} iterator() {
        return container${iteratorAccessor};
    }

    public boolean containsKey(final ${keyType} key) {
        return container.containsKey(key${keyFromBoolean});
    }

    public ${valueType} get(final ${keyType} key) {
        return container.get(key${keyFromBoolean})${valueToBoolean};
    }

    public ${mapType}$!{generic} getMap() {
        return container;
    }

    public void insert(final ${keyType} key, final ${valueType} value) {
        if (containsKey(key))
            return;

        final Command$!{genericCommand} command = new Command#if(${genericCommand})<>#end(Command.ADD, key, value);
        container.put(key${keyFromBoolean}, value${valueFromBoolean});
        touch();
        onInsert(key, value);
        changes.add(command);
        ++baselineCommandCount;
    }

    @Override
    public boolean isDirty() {
        return !changes.isEmpty();
    }

    @Override
    public int size() {
        return container.size();
    }

    public void set(final ${keyType} key, final ${valueType} value) {
        if (!containsKey(key)) {
            //Inserting...
            final Command$!{genericCommand} command = new Command#if(${genericCommand})<>#end(Command.ADD, key, value);
            container.put(key${keyFromBoolean}, value${valueFromBoolean});
            touch();
            onInsert(key, value);
            changes.add(command);
            ++baselineCommandCount;
        } else {
            //Setting...
            final Command$!{genericCommand} command = new Command#if(${genericCommand})<>#end(Command.SET, key, value);
            final ${valueType} oldValue = container.get(key${keyFromBoolean})${valueToBoolean};
            container.put(key${keyFromBoolean}, value${valueFromBoolean});
            touch();
            onSet(key, oldValue, value);
            changes.add(command);
            ++baselineCommandCount;
        }
    }

    @Override
    public void pack(final ByteBuffer buffer) {
        buffer.putInt(container.size());
        buffer.putInt(baselineCommandCount);

        ${containerForEachStart}
            buffer.put(Command.ADD);
            ${keySerializer};
            ${valueSerializer};
        ${containerForEachEnd}
    }

    @Override
    public void packDelta(final ByteBuffer buffer) {
        buffer.putInt(changes.size());
        buffer.putInt(baselineCommandCount);

        changes.stream().forEach(command -> {
            command.writeToBuffer(buffer);
        });

        clearDelta();
    }

    @Override
    public void unpack(final ByteBuffer buffer) {
        container.clear();
        clearDelta();

        final int commandCount = buffer.getInt();
        baselineCommandCount = buffer.getInt();

        for (int i =0 ;i < commandCount; ++i) {
            final Command$!{genericCommand} command = new Command#if(${genericCommand})<>#end(buffer#if(${keyCreator}), keyCreator#end#if(${valueCreator}), valueCreator#end);
            assert command.cmd == Command.ADD : "Only add is valid in unpack";
            container.put(command.key${keyFromBoolean}, command.value${valueFromBoolean});
            onInsert(command.key, command.value);
        }
    }

    @Override
    public void unpackDelta(final ByteBuffer buffer) {
        int skipCount;

        final int commandCount = buffer.getInt();
        final int targetBaselineCommandCount = buffer.getInt();

        //if (commandCount + baselineCommandCount) < targetBaselineCommandCount, it
        //means that we have missed some changes and are behind; when this happens,
        //catch up by applying all the deltas that came in, and set
        //baselineCommandCont to targetBaselineCommandCount

        if ((commandCount + baselineCommandCount) > targetBaselineCommandCount)
            skipCount = commandCount + baselineCommandCount - targetBaselineCommandCount;
        else
            skipCount = 0;

        //If this fails, it means that the deltas we are receiving are relative to baselines
        //which are newer than what we currently have. This usually means either we were not
        //observing an object for a time when deltas were sent, but aren't getting new
        //baselines, or our version of the container has been modified locally.
        if (skipCount > commandCount)
            skipCount = commandCount;

        int i;
        for (i =0 ; i < skipCount; ++i) {
            final byte cmd = buffer.get();
            final ${keyType} key = ${keyDeserializer};
            final ${valueType} value = ${valueDeserializer};
        }

        for (; i < commandCount; ++i) {
            final Command$!{genericCommand} command = new Command#if(${genericCommand})<>#end(buffer#if(${keyCreator}), keyCreator#end#if(${valueCreator}), valueCreator#end);

            switch (command.cmd) {
                case Command.ADD:
                case Command.SET:
                    set(command.key, command.value);
                break;
            case Command.ERASE:
                erase(command.key);
                break;
            default:
                assert false : "Unknown command";
                break;
            }
        }

    //If we are behind, catch up.
    if (baselineCommandCount < targetBaselineCommandCount)
        baselineCommandCount = targetBaselineCommandCount;
    }

    private void onErase(final ${keyType} key, final ${valueType} value) {
        //callback
    }

    private void onInsert(final ${keyType} key, final ${valueType} value) {
        //callback
    }

    private void onSet(final ${keyType} key, final ${valueType} oldValue, final ${valueType} newValue) {
        //callback
    }

    public static class Command${genericClass} implements ByteBufferWritable {
        public static final byte ADD = 0x0;
        public static final byte ERASE = 0x1;
        public static final byte SET = 0x2;

        public final byte cmd;
        public final ${keyType} key;
        public final ${valueType} value;

        public Command(int cmd, ${keyType} key, ${valueType} value) {
            this.cmd = (byte) cmd;
            this.key = key;
            this.value = value;
        }

        public Command(final ByteBuffer buffer#if(${keyCreator}), final ${keyCreator}#end#if(${valueCreator}), final ${valueCreator}#end) {
            this.cmd = buffer.get();
            this.key = ${keyDeserializer};
            this.value = ${valueDeserializer};
        }

        @Override
        public void writeToBuffer(final ByteBuffer buffer) {
            buffer.put(this.cmd);
            ${keySerializer};
            ${valueSerializer};
        }
    }
}
